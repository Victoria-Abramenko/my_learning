# # ___________________ задача №1 ___________________
# print("Привет, Яндекс!") #Привет, Яндекс!

# # ___________________ задача №2 ___________________
# name = input("Как Вас зовут?")#Вика
# print(f"Привет, {name}")#Привет, Вика

# # ___________________ задача №3 ___________________
# stroke = input()#2 + 2 = 4
# print(stroke)#2 + 2 = 4
# print(stroke)#2 + 2 = 4
# print(stroke)#2 + 2 = 4

# # ___________________ задача №4 ___________________
# money = int(input())#100
# price = int(2.5 * 38)
# get = money - price
# print(get)#5

# # ___________________ задача №5 ___________________
# num_1 = int(input())#2
# num_2 = int(input())#3
# num_3 = int(input())#10
# print(num_3 - (num_1 * num_2))#4

# # ___________________ задача №6 ___________________
# name = input()#черешня
# price = int(input())#2
# weight = int(input())#3
# money = int(input())#10
# sum_num = price * weight
# get_money = money - sum_num
# print("Чек")#Чек
# print(f"{name} - {weight}кг - {price}руб/кг")# черешня - 3кг - 2руб/кг
# print(f"Итого: {sum_num}руб")# Итого: 6руб
# print(f"Внесено: {money}руб")# Внесено: 10руб
# print(f"Сдача: {get_money}руб")# Сдача: 4руб

# # ___________________ задача №7 ___________________
# num = int(input())#3
# phrase = "Купи слона!\n"
# print(phrase * num)
# #Купи слона!
# #Купи слона!
# #Купи слона!

# # ___________________ задача №8 ___________________
# num = int(input())#3
# phrase = input()#Попка дурак!
# phrase_2 = "Я больше никогда не буду писать "
# phrase_3 = f'{phrase_2}"{phrase}"!\n'
# print(phrase_3 * num)
# # Я больше никогда не буду писать "Попка дурак!"!
# # Я больше никогда не буду писать "Попка дурак!"!
# # Я больше никогда не буду писать "Попка дурак!"!

# # ___________________ задача №9 ___________________
# num_1 = int(input())#10
# num_2 = int(input())#10
# print(int(num_1 * num_2 / 2))#50

# # ___________________ задача №10 ___________________
# name = input()#Ванечка
# num = int(input())#832
# num_2 = num // 100
# num_3 = num % 100 // 10
# num_4 = num % 10
# print(f"Группа №{num_2}.")
# print(f"{num_4}. {name}.")
# print(f"Шкафчик: {num}.")
# print(f"Кроватка: {num_3}.")
# #Группа №8.
# #2. Ванечка.
# #Шкафчик: 832.
# #Кроватка: 3.

# # ___________________ задача №11 ___________________
# num = int(input())#1234
# a = num // 1000
# b = num // 100 % 10
# c = num // 10 % 10
# d = num % 10
# print(int(f"{b}{a}{d}{c}"))#2143

# # ___________________ задача №12 ___________________
# num_1 = int(input())#123
# num_2 = int(input())#99
# c = (num_1 % 10 + num_2) % 10
# b = ((num_1 // 10 % 10) * 10 + num_2) // 10 % 10
# a = ((num_1 // 100) * 100 + num_2) % 1000 // 100
# print(int(f"{a}{b}{c}"))#112

# # ___________________ задача №13 ___________________
# children = int(input())#3
# candy = int(input())#100
# num_1 = candy // children
# num_2 = candy % children
# print(num_1)#33
# print(num_2)#1

# # ___________________ задача №14 ___________________
# red = int(input())#1
# green = int(input())#2
# blue = int(input())#3
# num = red + blue + 1
# print(num)#5

# # ___________________ задача №15 ___________________
# hour = int(input())#8
# minutе = int(input())#0
# minutе_1 = int(input())#65
# total_minutes = hour * 60 + minutе
# delivery = total_minutes + minutе_1
# hour_2 = delivery // 60 % 24
# minute_2 = delivery % 60 % 60
# print(f"{hour_2:0>2}:{minute_2:0>2}")#09:05

# # ___________________ задача №16 ___________________
# a = int(input())#10
# b = int(input())#32
# c = int(input())#5
# lenght = b - a
# t = lenght / c
# print(f"{t:.2f}")#4.40

# # ___________________ задача №17 ___________________
# num_10 = input()#123
# num_2 = input()#1101
# print(int(num_10, 10) + int(num_2, 2))#136

# # ___________________ задача №18 ___________________
# price = input()#1001001
# money = input()#100
# print(int(money) - int(price, 2))#27

# # ___________________ задача №19 ___________________
# name = input()#манго
# price = int(input())#187
# weight = int(input())#43
# money = int(input())#8041
# w_p = f"{weight}кг * {price}руб/кг"
# total = price * weight
# m_p = money - total
# print("================Чек================")
# print(f"Товар:{name: >29}")
# print(f"Цена:{w_p: >30}")
# print(f"Итого:{total: >26}руб")
# print(f"Внесено:{money: >24}руб")
# print(f"Сдача:{m_p: >26}руб")
# print("===================================")
# #================Чек================
# #Товар:                        манго
# #Цена:              43кг * 187руб/кг
# #Итого:                      8041руб
# #Внесено:                    8041руб
# #Сдача:                         0руб
# #===================================

# # ___________________ задача №20 ___________________
# n = int(input())#32
# m = int(input())#285
# k_1 = int(input())#300
# k_2 = int(input())#240
# n_1 = int((m - k_2) * n / (k_1 - k_2))
# n_2 = int(n - n_1)
# print(n_1, n_2)#24 8

# # ___________________ задача №21 ___________________
# print("Как Вас зовут?")
# name = input()#Аня
# print(f"Здравствуйте, {name}!")
# print("Как дела?")
# queshion = input()#хорошо
# if queshion == "хорошо":
#     print("Я за вас рада!")
# elif queshion == "плохо":
#     print("Всё наладится!")
# #Я за вас рада!

# # ___________________ задача №22 ___________________
# speed_p = int(input())#10
# speed_v = int(input())#5
# if speed_p > speed_v:
#     print("Петя")
# elif speed_p < speed_v:
#     print("Вася")
# #Петя

# # ___________________ задача №23 ___________________
# speed_p = int(input())#10
# speed_v = int(input())#5
# speed_t = int(input())#7
# if speed_p > speed_v and speed_p > speed_t:
#     print("Петя")
# elif speed_v > speed_p and speed_v > speed_t:
#     print("Вася")
# elif speed_t > speed_p and speed_t > speed_v:
#     print("Толя")
# #Петя

# # ___________________ задача №24 ___________________
# speed_p = int(input())#5
# speed_v = int(input())#7
# speed_t = int(input())#10
# if speed_p > speed_v > speed_t:
#     print("1. Петя")
#     print("2. Вася")
#     print("3. Толя")
# elif speed_p > speed_t > speed_v:
#     print("1. Петя")
#     print("2. Толя")
#     print("3. Вася")
# elif speed_v > speed_t > speed_p:
#     print("1. Вася")
#     print("2. Толя")
#     print("3. Петя")
# elif speed_v > speed_p > speed_t:
#     print("1. Вася")
#     print("2. Петя")
#     print("3. Толя")
# elif speed_t > speed_p > speed_v:
#     print("1. Толя")
#     print("2. Петя")
#     print("3. Вася")
# elif speed_t > speed_v > speed_p:
#     print("1. Толя")
#     print("2. Вася")
#     print("3. Петя")
# #1. Толя
# #2. Вася
# #3. Петя

# # ___________________ задача №25 ___________________
# n = int(input())#3
# m = int(input())#5
# num_p = 7 - 3 + 2 + n
# num_v = 6 + 3 + 5 - 2 + m
# if num_p > num_v:
#     print("Петя")
# elif num_p < num_v:
#     print("Вася")
# #Вася

# # ___________________ задача №26 ___________________
# year = int(input())#2022
# num = year % 4
# if num == 0:
#     print("YES")
# else:
#     print("NO")
# #NO

# # ___________________ задача №27 ___________________
# num = int(input())#2332
# d = int(num % 10)
# c = int(num % 100 / 10)
# b = int(num % 1000 / 100)
# a = int(num / 1000)
# if a == d and b == c:
#     print("YES")
# else:
#     print("NO")
# #YES

# # ___________________ задача №28 ___________________
# phrase = input()#березка елочка зайка волк березка
# if "зайка" in phrase:
#     print("YES")
# else:
#     print("NO")
# #YES

# # ___________________ задача №29 ___________________
# name_1 = input()#Вова
# name_2 = input()#Аня
# name_3 = input()#Боря
# if name_1 < name_2 and name_1 < name_3:
#     print(name_1)
# elif name_2 < name_1 and name_2 < name_3:
#     print(name_2)
# elif name_3 < name_1 and name_3 < name_1:
#     print(name_3)
# #Аня

# # ___________________ задача №30 ___________________
# num = int(input())#123
# a = int(num / 100)
# b = int(num % 100 / 10)
# c = int(num % 10)
# num_1 = a + b
# num_2 = b + c
# if num_1 > num_2:
#     print(f"{num_1}{num_2}")
# else:
#     print(f"{num_2}{num_1}")
# #53

# # ___________________ задача №31 ___________________
# num = int(input())#123
# a = int(num / 100)
# b = int(num % 100 / 10)
# c = int(num % 10)
# num_min = min(a, b, c)
# num_max = max(a, b, c)
# if a != num_min and a != num_max:
#     num_3 = a
# elif b != num_min and b != num_max:
#     num_3 = b
# elif c != num_min and c != num_max:
#     num_3 = c
# else:
#     num_3 = 0
# if num_min + num_max == num_3 * 2:
#     print("YES")
# else:
#     print("NO")
# #YES

# # ___________________ задача №32 ___________________
# a = int(input("Введите число a: "))#10
# b = int(input("Введите число b: "))#15
# c = int(input("Введите число c: "))#12
# if a > b:
#     if a > c:
#         print("Максимальное из этих трех чисел число a")
#     else:
#         print("Максимальное из этих трех чисел число c")
# else:
#     if b > c:
#         print("Максимальное из этих трех чисел число b")
#     else:
#         print("Максимальное из этих трех чисел число c")
# # Максимальное из этих трех чисел число b

# # ___________________ задача №33 ___________________
# n = int(input("Введите натуральное число: "))#6
#
# p = 1
#
# for i in range(1, n + 1):
#     p *= i
#
# print(f"Факториал числа {n} = {p}")#720

# # ___________________ задача №34 ___________________

# for i in range(1 , 7):
#     print("*" * i)
# # *
# # **
# # ***
# # ****
# # *****
# # ******

# # ___________________ задача №35 ___________________
# # Что выведет код?
# a = {1: "A", 2: "B", 3: "C"}
# b = a.copy()
# b[2] = "D"
# print(a)  # {1: 'A', 2: 'B', 3: 'C'}

# # ___________________ задача №36 ___________________
# # Написать программу для слияния нескольких словарей
# dict_a = {1:2, 2:3, 3:4}
# dict_b = {4:5, 5:6, 6:7}
# dict_c = {7:8, 8:9, 9:10}
# # 1й способ
#
# resault = {}
# for i in (dict_a, dict_b, dict_c):
#     resault.update(i)
# # 2й способ
# resault = {**dict_a, **dict_b, **dict_c}

# # ___________________ задача №37 ___________________
# # Выведите все элементы из списка, которые меньше 5
# a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
#
# # 1й способ
# for elem in a:
#     if elem < 5:
#         print(elem)
#
# # 2й способ
# print(list(filter(lambda elem: elem < 5, a)))
#
# # 3й способ
# print([elem for elem in a if elem < 5])

# # ___________________ задача №38 ___________________
# # Нужно вернуть список, который состоит из элементов, общих для этих двух списков.
# a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
# b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
#
# # 1й способ
# resault = list(filter(lambda elem: for elem in b, a))
#
# # 2й способ
# resault = [elem for elem in a if elem in b]
#
# # 3й способ
# result = list(set(a) & set(b))  # но при таком способе, не будет повторяющихся элементов, так как кортежи содержат только уникальные элементы

# # ___________________ задача №39 ___________________
# # Отсортировать словарь по возрастанию, и по убыванию
# import operator
# d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
#
# # Отсортировать словарь по возрастанию
# resault = dict(sorted(d.items(), key=operator.itemgetter(1)))
# # Отсортировать словарь по убыванию
# resault = dict(sorted(d.items(), key=operator.itemgetter(1), reverse=True))

# # ___________________ задача №40 ___________________
# # Найдите три ключа с самыми высокими значениями в словаре
# my_dict = {'a':500, 'b':5874, 'c': 560,'d':400, 'e':5874, 'f': 20}
#
# # 1й способ
# resault = sorted(my_dict, key=my_dict.get, reverse=True)[:3]
# # 2й способ при помощи функции nlargest модуля heapq
# from heapq import nlargest
#
# resault = nlargest(3, my_dict, key=my_dict.get)

# # ___________________ задача №41 ___________________
# # написать программу, которая развернет число (тип int)
# # ____  1 способ  ____
# def reverse_number(x):
#     return int(str(x)[::-1])
#
# print (reverse_number(12345))  # 54321
#
# # _____  2 способ  _____
# def reverse_int(x):
#     return int(''.join(list(reversed(str(x)))))
#
# print(reverse_int(12345))  # 54321

# # ___________________ задача №42 ___________________
# # написать программу, которая проверяет является ли число, числом Армстронга.
# # Число Армстронга - натуральное число, которое равно сумме своих цифр, возведенныз в степень, равную количеству его цифр.
# # Например, число 371 = 3**3 + 7**3 + 1**3
# def armstrong_number(num):
#     sum = 0
#     length = len(str(num))
#     for x in list(str(num)):
#        sum += int(x)**length
#     return sum == num
#
# print(armstrong_number(371))  # True
#
# # ___________________ задача №43 ___________________
# # Написать программу, которая проверит каждое число списка, является ли оно простым
# # Простое число - число > 1, у которого есть только два делителя 1 и само число
# def prime_num(num):
#     for x in range(2, num):
#         if num % x == 0:
#             return False
#     return True
#
# lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
#
# for item in lst:
#     print(f"{item} - {prime_num(item)}")
# 1 - True
# 2 - True
# 3 - True
# 4 - False
# 5 - True
# 6 - False
# 7 - True
# 8 - False
# 9 - False
# 10 - False
# 11 - True
# 12 - False
# 13 - True
# 14 - False


# # ___________________ задача №44 ___________________
# # Написать программу, которая составит список чисел Фибоначчи через итеративный метод.
# # Числа Фибоначчи - последовательность чисел, в которой первые два числа 0, 1, а каждое последующее равно сумме
# # двух предыдущих чисел.
# def fibonacci(length):
#     lst = [0, 1]
#     for item, index in enumerate(range(2, length)):
#         lst.append(lst[index-2] + lst[index - 1])
#     return lst
#
# print(fibonacci(14))  # [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233]



# # ************  Практика Stepic Сергей Балакириев  *************
# # ______  Задание 1   ______
# #  С помощью функции print выведите сообщение "Hello Python!" (без кавычек).
# print("Hello Python!")  # Hello Python!

# # ______  Задание 2   ______
# #  С помощью функции print выведите сумму двух чисел 6+7
# print(6 + 7)  # 13

# # ______  Задание 3   ______
# # В программе объявите три следующие переменные с указанными значениями:
# #
# # a = 7
# # b = -4
# # c = 3
# # Выведите в консоль их значения, используя одну функцию print (между значениями переменных должен стоять один пробел).
# a = 7
# b = -4
# c = 3
# print(a, b, c) # 7 -4 3

# # ______  Задание 4   ______
# # В программе объявите три следующие переменные с указанными значениями:
# #
# # a = 7
# # b = -4
# # c = 3
# # Выведите в консоль их значения в столбик (каждое новое значение отображается с новой строчки), используя одну функцию print.
# a = 7
# b = -4
# c = 3
# print(a, b, c, sep="\n")
# # 7
# # -4
# # 3

# # ______  Задание 5   ______
# # В программе объявите две следующие переменные с указанными значениями:
# #
# # s1 = "Hello"
# # s2 = "Balakirev"
# # С помощью двух функций print (каждая отображает соответствующую строку) выведите строки в консоль так, чтобы они шли друг за другом через пробел.
# s1 = "Hello"
# s2 = "Balakirev"
# print(s1, end=" ")
# print(s2)
# # Hello Balakirev

# # ______  Задание 6   ______
# # В программе вводятся строки в переменные s1 и s2. Необходимо их отобразить в консоли в формате:
# #
# # Word 1: s1 | Word 2: s2
# #
# # Например, если s1 = "abc"; s2 = "defsg", то выводится строка:
# #
# # Word 1: abc | Word 2: defsg
# s1, s2 = map(str.strip, input().split())
#
# print(f"Word 1: {s1} | Word 2: {s2}") # Word 1: abc | Word 2: defsg

# # ______  Задание 7   ______
# #  Напишите программу, в которой вводятся (читаются) два целых положительных числа, записанных в одну строчку через пробел, и в консоль выводится результат возведения первого числа в степень второго.
# a, b = map(int, input().split())
# print(a ** b) # 8

# # ______  Задание 8  ______
# # Напишите программу, которая принимает на входе два вещественных числа, записанных в одну строку через пробел, и выводит на экран их сумму.
# a, b = map(float, input().split())
# print(a + b)  # 19.0

# # ______  Задание 9  ______
# # В магазине продается X синих ручек, Y зеленых, черных в два раза больше, чем синих, а красных в четыре раза больше зеленых. Напишите программу, в которой вводятся целые значения X, Y в одну строку через пробел с помощью команды:
# #
# # X, Y = map(int, input().split())
# #
# # и выводится на экран общее число ручек в виде целого числа.
# blue, green = map(int, input().split())
# black = blue * 2
# red = green * 4
# print(blue + black + green + red)  # 130

# # ______  Задание 10  ______
# # На вход программе подаются длина и ширина прямоугольника (вещественные значения, каждое с новой строки). Необходимо прочитать эти значения и вычислить периметр прямоугольника (сумму длин сторон). Результат (периметр) вывести на экран в виде вещественного числа.
# a = float(input())
# b = float(input())
#
# print(float(2 * (a + b)))  # 38.0

# # # ______  Задание 11  ______
# # программе вводится целое число и сохраняется через переменную d. Необходимо продолжить эту программу.
# # Вычислите модуль числа d и выведите результат (модуль) в консоль с помощью функции print.
# d = int(input())
# print(abs(d)) # 5

# # # ______  Задание 12  ______
# #  Допишите текст программы для нахождения минимального значения из пяти введенных целых чисел с выводом результата в
# #  консоль (минимального значения) с помощью функции print.
# d1, d2, d3, d4, d5 = map(int, input().split()) # 1 2 3 4 5
# print(min(d1, d2, d3, d4, d5)) # 5

# # # ______  Задание 13  ______
# # Допишите текст программы для нахождения максимального значения из пяти введенных целых чисел с выводом результата
# # (максимального значения) в консоль с помощью функции print.
# d1, d2, d3, d4, d5 = map(int, input().split())  # 8 11 0 -5 3
# print(max(d1, d2, d3, d4, d5))  # 11

# # # ______  Задание 14  ______
# # Допишите текст программы для вычисления евклидового расстояния (гипотенузы) по перемещениям a и b (формула:___ )
# #Округлите результат с точностью до сотых. Полученное значение выведите на экран.
# a, b = map(int, input().split())  # 3 4
# res = pow(a ** 2 + b ** 2, 0.5)
# print(round(res, 2))  # 5.0

# # # ______  Задание 15  ______
# Допишите программу для нахождения числа сочетаний из n по k (значения вводятся в программе), используя формулу : ____
# # n!=1⋅2⋅⋯⋅n. Выведите результат в консоль в виде целого числа с помощью функции print.
# # Для вычисления факториалов воспользуйтесь соответствующей функцией из библиотеки math.
# import math
# n, k = map(int, input().split())  # 6 3
# print(int(math.factorial(n) / (math.factorial(k) * math.factorial(n - k))))  # 20

# # # ______  Задание 16  ______
# В летний лагерь нужно отвезти n детей и m вожатых с помощью автобусов (значения считываются из входного потока
# в программе ниже). Максимальная вместимость каждого автобуса 20 человек. Допишите программу для вычисления минимального
# числа автобусов, необходимых для перевозки детей вместе с вожатыми. Результат выведите в консоль в виде целого числа.
# import math
# n, m = map(int, input().split())  # 40 5
# print(math.ceil((n + m) / 20)) # 3

# # # ______  Задание 17  ______
# # Гелевая ручка стоит x рублей (значение вводится из входного потока в программе ниже). Сегодня магазин предоставляет
# # скидку в 10% на каждую купленную ручку. Какое наибольшее количество таких ручек можно будет купить на 500 рублей?
# # Результат выведите в консоль в виде целого числа.
# x = int(input())  # 20
# sale = x - (x * 10 / 100)
# print(int(500 // sale))  # 27

# # # ______  Задание 18  ______
# # Напишите программу вывода переменной math.pi с точностью до тысячных (три знака после запятой).
# import math
#
# print(float(f"{math.pi:.3f}"))  # 3.142

# # # ______  Задание 19  ______
# # Составить программу вывода на экран вещественного числа, вводимого с клавиатуры. Выводимому числу должно
# # предшествовать сообщение "Вы ввели число" (без кавычек).
# x = float(input())  # 7.54
# print(f"Вы ввели число {x}")  # Вы ввели число 7.54

# # # ______  Задание 20  ______
# #  Напишите программу, которая из входного потока читает вещественное число. Нужно определить, что целая часть
# #  прочитанного числа кратна 3. На экран вывести True, если кратно и False - в противном случае.
# #  Задача делается без использования условного оператора.
# x = float(input())  # 78.34
# print(int(x) % 3 == 0) # True

# # # ______  Задание 21  ______
# # Напишите программу, которая читает из входного потока стоимость книги X рублей в виде вещественного числа
# # (например, X = 435.78) - положительное вещественное число с точностью до сотых (два знака после запятой).
# # Требуется определить, является ли дробное значение (число после запятой) больше 50. На экран вывести True,
# # если больше и False - в противном случае. Задача делается без использования условного оператора.
# x = float(input())  # 456.56
# print((x * 100) % 100 > 50)  # True

# # # ______  Задание 22  ______
# #  Напишите программу, в которой читаются два целочисленных значения, записанных в одну строчку через пробел, с помощью команды:
# # a, b = map(int, input().split())
# # Необходимо определить, можно ли первое число нацело разделить на второе. На экран вывести True, если делится и False
# # - в противном случае. Задача делается без использования условного оператора.
# a, b = map(int, input().split())  # 12 3
# print(a % b == 0)  # True

# # # ______  Задание 23  ______
# # Напишите программу, в которой читаются три целых положительных числа с помощью команды:
# # a, b, c = map(int, input().split())
# # Необходимо определить, можно ли их интерпретировать (воспринимать) как длины сторон треугольника. Напомню, что сумма
# # длин двух произвольных сторон всегда должна быть больше третьей стороны. На экран вывести True, если треугольник
# # формируется и False - в противном случае. Задача делается без использования условного оператора.
# a, b, c = map(int, input().split())  # 8 11 12
# print((a + b) > c and (a + c) > b and (b + c) > a)  # True

# # # ______  Задание 24  ______
# # Напишите программу, в которой читается вещественное число. Нужно проверить, что прочитанное число попадает или в
# # диапазон [0; 2] или в диапазон [10; 20] (включительно). На экран вывести True, если попадает и False - в противном
# # случае. Задача делается без использования условного оператора.
# x = float(input())  # 1.2
# print(0 <= x <= 2 or 10 <= x <= 20)  # True

# # # ______  Задание 25  ______
# # На вход программе подаются две строки (каждая вводится с новой строки). Необходимо их прочитать и объединить в одну
# # строку через пробел. Результат вывести на экран.
# str1 = input()  # hello python
# str2 = input()  # i love you
# print(str1 + " " + str2) # hello python i love you

# # # ______  Задание 26  ______
# # На вход программе подается строка из двух слов, записанных через пробел. Необходимо прочитать эту строку и
# # сформировать новую строку, продублировав первое слово дважды, а второе - трижды (все слова в результирующей строке
# # должны идти через пробел). Результат выведите на экран.
# # Программу следует реализовать без использования F-строк, с применением оператора дублирования строк.
# str1, str2 = input().split()  # hello python
# print((str1 + " ") * 2 + (str2 + " ") * 3)

# # # ______  Задание 27  ______
# # На вход программе подаются два целых числа, записанных через пробел. Необходимо прочитать эти целочисленные значения
# # в переменные a и b. Затем, сформировать строку вида (без кавычек):
# # "Переменная a = <значение>, переменная b = <значение>"
# # используя оператор конкатенации (соединения) строк. Результат (строку) выведите на экран.
# # P. S. F-строки в программе не использовать.
# num1, num2 = map(int, input().split())  # 2 -5
# print("Переменная a = " + str(num1) + ", переменная b = " + str(num2))  # Переменная a = 2, переменная b = -5

# # # ______  Задание 28  ______
# # На вход программе подается строка. Необходимо прочитать эту строку и сформировать новую строку вида (без кавычек):
# # "Строка: <введенная строка>. Длина: <длина строки>".
# # Полученную строку вывести на экран.
# # P. S. В программе F-строки не использовать.
# str1 = input()  # hello Balakirev
# print("Строка: " + str(str1) + ". Длина: " + str(len(str1)))  # Строка: hello Balakirev. Длина: 15

# # # ______  Задание 29  ______
# # На вход программе подается строка из двух слов, записанных через пробел. Необходимо прочитать эту строку и
# # вычислить следующие булевы значения:
# # для оператора in (проверки вхождения первого слова во второе);
# # для оператора == (сравнения двух слов);
# # для оператора > (сравнение на больше первого слова со вторым);
# # для оператора < (сравнение на меньше первого слова со вторым).
# # Все булевы значения объединить в одну строку через пробел и вывести на экран в порядке их перечисления в задании подвига.
# str1, str2 = input().split()  # hello python
# res1 = str1 in str2
# res2 = str1 == str2
# res3 = str1 > str2
# res4 = str1 < str2
# print(f'{res1} {res2} {res3} {res4}')  # False False False True

# # # ______  Задание 30  ______
# # На вход программе подаются две буквы, записанные через пробел. Необходимо вывести на экран строку в формате (без кавычек):
# # "Коды: <буква1> = <код буквы1>, <буква2> = <код буквы2>"
# word1, word2 = input().split() # a z
# print(f"Коды: {word1} = {ord(word1)}, {word2} = {ord(word2)}") # Коды: a = 97, z = 122

# # # ______  Задание 30  ______
# #  На вход программе подается строка. Прочитайте эту строку и отобразите на экране ее первый и последний символ
# #  (подряд в одну строчку).
# str1 = input()  # I love Python
# print(f"{str1[0]}{str1[-1]}") # In

# # # ______  Задание 31  ______
# # На вход программе подается строка. Прочитайте эту строку и отобразите первые четыре ее символа. Полагается, что строка
# # гарантированно имеет длину не менее четырех символов.
# str1 = input() # panda
# print(str1[:4]) # pand

# # # ______  Задание 32  ______
# # На вход программе подается строка. Прочитайте эту строку и отобразите последние три ее символа. Полагается,
# # что строка гарантированно имеет длину не менее трех символов.
# str1 = input()  # Balakirev
# print(str1[-3:])

# # # ______  Задание 33  ______
# # На вход программе подается строка. Прочитайте ее и отобразите все ее символы с нечетными индексами (подряд в одну строчку).
# str1 = input()  # Balakirev
# print(str1[1::2])

# # # ______  Задание 34  ______
# #  На вход программе подаются две строки, каждая с новой строчки. Прочитайте их и из первой строки выделите все символы
# #  с четными индексами, а из второй - с нечетными. Объедините полученные строки через пробел и выведите результирующую
# #  строку на экран.
# str1 = input() # Hello
# str2 = input() # Python
# res1 = str1[::2]
# res2 = str2[1::2]
# print(str(res1) + " " + str(res2)) # Hlo yhn

# # # ______  Задание 35  ______
# # На вход программе подается строка. Необходимо ее прочитать и отобразить первые пять символов в обратном порядке.
# # Полагается, что введенная строка имеет минимум пять символов.
# str1 = input()  # abrakadabra
# print(str1[4::-1])   # karba

# # # ______  Задание 36  ______
# # На вход программе подается строка, состоящая из двух слов, записанных через пробел. Длина первого слова меньше второго.
# # Необходимо прочитать строку, выделить из нее слова и обрезать второе слово до длины первого. Полученное (обрезанное)
# # слово выведите в консоль (на экран).
# word1, word2 = input().split()  # Hello Balakirev
# print(word2[:len(word1)]) # Balak

# # # ______  Задание 37  ______
# #  На вход программе подается строка, состоящая из двух слов, записанных через пробел. Длина второго слова меньше
# #  первого. Необходимо прочитать строку, выделить из нее слова, затем, первое слово обрезать до длины второго, у
# #  каждого слова выделить символы с нечетными индексами и полученные слова сравнить. Результат (True или False) вывести
# #  на экран. Задачу выполнить без использования условного оператора.
# word1, word2 = input().split()  # Hello Hell
# res1 = word1[:len(word2)]
# res2 = res1[1::2] == word2[1::2]
# print(res2)  # True

# # # ______  Задание 38  ______
# # На вход программе подается слово в виде строки. Необходимо прочитать это слово и его первую букву сделать заглавной,
# # а остальные - малыми. Результат отобразить на экране.
# str1 = input()  # HELLO
# res = f"{str1[0].upper()}{str1[1:].lower()}"
# print(res) # Hello

# # # ______  Задание 39  ______
# # На вход программе подается строка. Необходимо прочитать эту строку и определить число вхождений дефисов (-) в ней.
# # На экране отобразить полученное число.
# str1 = input()  # osnovnye-metody-strok
# print(str1.count("-"))  # 2

# # # ______  Задание 40  ______
# #  На вход программе подается строка. Прочитайте эту строку и с помощью метода String.find найдите в ней индекс первого
# #  вхождения фрагмента "ra". Полученное число (индекс) выведите на экран.
# str1 = input()  # abrakadabra
# print(str1.find("ra"))  # 2

# # # ______  Задание 41  ______
# # На вход программе подается строка (слаг). Прочитайте ее и замените в ней все двойные дефисы (--) и тройные (---) на
# # одинарные (-). Подумайте, в какой последовательности следует выполнять эти замены. Результат преобразования выведите на экран.
# str1 = input()  # dobavlyaem---slagi--slug-k--url---adresam
# print(str1.replace("---", "-").replace("--", "-"))  # dobavlyaem-slagi-slug-k-url-adresam

# # # ______  Задание 42  ______
# # На вход программе подаются три целых положительных числа (максимум трехзначные), записанные в одну строчку через пробел.
# # Необходимо их прочитать из входного потока. Затем, для двухзначных и однозначных чисел добавить слева незначащие нули так,
# # чтобы все числа содержали по три цифры. Вывести на экран полученные числа в столбик (каждое с новой строки) в порядке
# # их чтения из входного потока.
# num1, num2, num3 = input().split()# 8 11 123
# num1 = num1.rjust(3, "0")
# num2 = num2.rjust(3, "0")
# num3 = num3.rjust(3, "0")
# print(num1, num2, num3, sep="\n")
# # 008
# # 011
# # 123

# # # ______  Задание 43  ______
# # На вход программе подается строка, состоящая из слов, разделенных пробелом. Необходимо прочитать строку и подсчитать
# # число слов в ней. Результат (число слов) отобразить на экране.
# str1 = input().split()  # I love Python
# print(len(str1))  # 3

# # # ______  Задание 44  ______
# # На вход программе подается строка, состоящая из названий городов, разделенных пробелом. Необходимо прочитать эту
# # строку и преобразовать так, чтобы названия городов шли через точку с запятой (без пробелов). Результат (строку)
# # отобразите на экране.
# str1 = input().split()  # Москва Тверь Казань
# print(";".join(str1))  # Москва;Тверь;Казань

# # # ______  Задание 45  ______
# # Необходимо задать (объявить) строку со следующим содержимым:
# # Тема занятия "спецсимволы"
# # И отобразить ее на экране (кавычки у слова спецсимволы также должны быть отображены).
# print("Тема занятия \"спецсимволы\"")

# # # ______  Задание 46  ______
# # На вход программе подается строка, состоящая из двух слов, записанных в одну строчку через пробел. Необходимо
# # прочитать строку и между словами поставить символ обратного слеша (вместо пробела). Результирующую строку отобразите на экране.
# # P. S. Задачу реализовать без применения F-строк.
# str1 = input().split()  # Hello Balakirev!
# res = "\\".join(str1)
# print(res)  # Hello\Balakirev!

# # # ______  Задание 47  ______
# # На вход программе подается строка со словами, разделенными пробелами (один пробел между соседними словами). В строке
# # может присутствовать от одного и более слов. Необходимо прочитать строку и первый пробел (если он есть) заменить на
# # одинарную кавычку, а все остальные - на двойные. Результирующую строку вывести на экран.
# str1 = input()  # My best friend is Python!
# res1 = str1.replace(" ", "\'", 1)
# res2 = res1.replace(" ", "\"")
# print(res2)  # My'best"friend"is"Python!

# # # ______  Задание 48  ______
# # Используя raw-строки, задайте (объявите) строку, содержащую следующий путь к файлу:
# # C:\WINDOWS\System32\drivers\etc\hosts.
# # Полученную строку выведите в консоль (на экран).
# print(r"C:\WINDOWS\System32\drivers\etc\hosts") # C:\WINDOWS\System32\drivers\etc\hosts

# # # ______  Задание 49  ______
# # На вход программе подается слово в виде строки. Необходимо прочитать его и сформировать новую строку, где введенное
# # слово будет заключено в двойные кавычки. Результат вывести на экран.
# str1 = input()  # language
# print(f"\"{str1}\"")  # "language"

# # # ______  Задание 50  ______
# # На вход программе подаются (каждое с новой строки) следующие данные:
# # имя (строка);
# # фамилия (строка);
# # возраст (целое положительное число).
# # Необходимо прочитать эти данные и, используя строковый метод format, сформировать новую строку по шаблону:
# # "Уважаемый <имя> <фамилия>! Поздравляем Вас с <возраст>-летием!"
# # Результат (строку) вывести на экран (без кавычек).
# name = input()  # Sergey
# surname = input()  # Balakirev
# old = input()  # 35
# print("Уважаемый {name} {surname}! Поздравляем Вас с {old}-летием!".format(name=name, surname=surname, old=old))
# # Уважаемый Sergey Balakirev! Поздравляем Вас с 35-летием!

# # # ______  Задание 51  ______
# #  На вход программе подаются габариты изделия (целые числа): ширина, глубина, высота, записанные в одну строчку через
# #  пробел. Необходимо прочитать эти числа и с помощью метода format, используя ключи в качестве имен переменных, 
# #  сформировать строку по шаблону:
# # "Габариты: <ширина> x <глубина> x <высота>"
# # Полученную строку вывести на экран (без кавычек).
# num1, num2, num3 = input().split()  # 8 11 13
# print("Габариты: {width} x {depth} x {height}".format(width=num1, depth=num2, height=num3))  # Габариты: 8 x 11 x 13

# # # ______  Задание 52  ______
# #  На вход программе подаются два целых числа, записанных в одну строку через пробел. Необходимо прочитать эти числа и
# #  сформировать новую F-строку со значениями прочитанных чисел, записанных по возрастанию через пробел.
# #  Полученную строку вывести на экран.
# # P. S. Реализовать программу без использования условных операторов. Подумайте, как это можно сделать.
# lst = list(map(int, input().split()))  # 18 11
# lst.sort()
# num1 = lst[0]
# num2 = lst[1]
# print(f"{num1} {num2}") # 11 18

# # # ______  Задание 53  ______
# #  На вход программе подается адрес в формате (каждое значение с новой строки):
# # город (строка);
# # улица (строка);
# # номер дома (целое число);
# # номер квартиры (целое число).
# # Необходимо прочитать эти данные и сформировать строку по шаблону, используя F-строку:
# # "г. <город>, ул. <улица>, д. <номер дома>, кв. <номер квартиры>"
# # Результат вывести на экран (без кавычек).
# str1 = input()  # Москва
# str2 = input()  # Воздвиженка
# str3 = input()  # 9
# str4 = input()  # 1
# print(f"г. {str1}, ул. {str2}, д. {str3}, кв. {str4}")  # г. Москва, ул. Воздвиженка, д. 9, кв. 1

# # # ______  Задание 54  ______
# # На вход программе подаются следующие данные (каждое с новой строки):
# # курс доллара (вещественное значение);
# # число рублей (целое число) для обмена рублей на доллары.
# # Необходимо прочитать эти данные и вычислить целое количество получаемых долларов (с отбрасыванием дробной части) и
# # сформировать строку, по шаблону:
# # "Вы можете получить <долларов>$ за <число рублей> рублей по курсу <курс доллара>"
# # Вывести полученную строку на экран (без кавычек).
# rate_dollar = float(input())  # 73.54
# number_rub = int(input())  # 1000
# dollar = int(number_rub / rate_dollar)
# print(f"Вы можете получить {dollar}$ за {number_rub} рублей по курсу {rate_dollar}")
# # Вы можете получить 13$ за 1000 рублей по курсу 73.54

# # # ______  Задание 55  ______
# # На вход программе подаются три целых числа, записанных в одну строку через пробел. Необходимо прочитать эти числа
# # и сформировать список lst, хранящий прочитанные значения в порядке их чтения. Результат (список) выведите на экран,
# # используя команду:
# # print(lst)
# lst = list(map(int, input().split())) # 8 11 3
# print(lst) # [8, 11, 3]

# # # ______  Задание 56  ______
# # На вход программе подается строка с названиями городов, записанных в одну строчку через пробел. Необходимо прочитать
# # эту строку и на ее основе сформировать список с помощью следующей команды:
# # cities = input().split()
# # Затем, необходимо проверить, присутствует ли в этом списке город "Москва". Вывести на экран True, если присутствует
# # и False - в противном случае. Решить эту задачу следует без использования условного оператора.
# cities = list(input().split())  # Тверь Уфа Москва Казань
# print("Москва" in cities)  # True

# # # ______  Задание 57  ______
# # На вход программе подается строка с названиями городов, записанных в одну строчку через пробел.
# # Прочитайте эту строку и на ее основе сформируйте список с помощью следующей команды:
# # cities = input().split()
# # Выведите значение последнего элемента списка cities на экран.
# cities = list(input().split())  # Москва Питер Уфа Казань Владимир
# print(cities[-1])  # Владимир

# # # ______  Задание 58  ______
# # На вход программе подаются оценки студента (целые числа от 2 до 5), записанные в одну строчку через пробел.
# # Все эти оценки читаются и сохраняются в список с помощью следующей команды (прописать в программе):
# # marks = list(map(int, input().split()))
# # Необходимо вычислить средний балл списка marks и вывести его на экран с точностью до десятых (один знак после запятой).
# marks = list(map(int, input().split()))  # 3 3 2 4 4 5 4 3 2
# print(round(sum(marks) / len(marks), 1))  # 3.3

# # # ______  Задание 59  ______
# #  На вход программе подаются следующие данные по книге (каждое значение с новой строки):
# # название (строка);
# # автор (строка);
# # число страниц (целое число);
# # цена (вещественное число).
# # Необходимо прочитать эти данные и сохранить в списке book в порядке их чтения. Затем, из этого списка удалить 3-й
# # элемент (число страниц), в качестве автора записать "Пушкин", а цену увеличить в 2 раза. Результат (список book)
# # вывести на экран командой:
# # print(book)
# title = input()  # Мастер и Маргарита
# author = input()  # Булгаков
# page = int(input())  # 233
# price = float(input())  # 435.45
# book = [title, author, page, price]
# del book[2]
# book[1] = "Пушкин"
# book[2] = price * 2
# print(book) # ['Мастер и Маргарита', 'Пушкин', 870.9]

# # # ______  Задание 60  ______
# # На вход программе подается строка с числами новых подписчиков канала по дням, записанных в одну строку через пробел.
# # Необходимо прочитать эти числа и сохранить в списке, как целые числа в порядке их следования в строке. Затем,
# # вывести через пробел на экран максимальное, минимальное и суммарное значения этого списка.
# lst = list(map(int, input().split()))  # 52 65 64 54 68 59 42 63
# print(f"{max(lst)} {min(lst)} {sum(lst)}")  # 68 42 467

# # # ______  Задание 61  ______
# # На вход программе подается строка с числами новых подписчиков канала по дням, записанных в одну строку через пробел.
# # Необходимо прочитать эти числа и сохранить в списке lst, как целые числа в порядке их следования в строке. Затем,
# # отсортировать элементы этого списка по убыванию и результат вывести на экран командой:
# # print(*lst)
# lst = list(map(int, input().split()))  # 52 65 64 54 68 59 42 63
# lst.sort(reverse=True)
# print(*lst)  # 68 65 64 63 59 54 52 42

# # # ______  Задание 62  ______
# #  На вход программе подается строка, содержащая названия городов, записанных через пробел. Необходимо прочитать эту
# #  строку и на ее основе создать список lst из названий городов, добавив в его начало список cities:
# # cities = ["Москва", "Тверь", "Вологда"]
# # Выведите полученный список lst на экран командой:
# # print(*lst)
# lst = list(input().split())  # Уфа Казань Севастополь
# cities = ["Москва", "Тверь", "Вологда"]
# lst = cities + lst
# print(*lst)  # Москва Тверь Вологда Уфа Казань Севастополь

# # # ______  Задание 63  ______
# # На вход программе подается строка, содержащая названия городов, записанных через пробел. Необходимо прочитать эту
# # строку и на ее основе сформировать список lst из названий городов, добавив в его конец список cities:
# # cities = ["Москва", "Тверь", "Вологда"]
# #  Выведите полученный список lst на экран командой:
# # print(*lst)
# lst = list(input().split())  # Уфа Казань Севастополь
# cities = ["Москва", "Тверь", "Вологда"]
# lst = lst + cities
# print(*lst) # Уфа Казань Севастополь Москва Тверь Вологда

# # # ______  Задание 64  ______
# # Объявите в программе следующий список с числами просмотров видео по дням:
# # v = [1205, 1101, 1434, 1320, 923, 874]
# # Выберите из списка v первые три значения (используя срезы) и выведите этот срез как список на экран.
# v = [1205, 1101, 1434, 1320, 923, 874]
# print(v[:3])

# # # ______  Задание 65  ______
# # Объявите в программе следующий список с числами просмотров видео по дням:
# # v = [1205, 1101, 1434, 1320, 923, 874]
# # Выберите из него последние четыре значения (используя срезы) и выведите этот срез как список на экран.
# v = [1205, 1101, 1434, 1320, 923, 874]
# print(v[2:])

# # # ______  Задание 66  ______
# # Объявите в программе следующий список с названиями городов:
# # c = ["Москва", "Ульяновск", "Самара", "Тверь", "Вологда", "Омск", "Уфа"]
# # С помощью срезов выберите из этого списка города через один (начиная с первого) и результат (срез)
# # выведите на экран в виде полученного списка.
# c = ["Москва", "Ульяновск", "Самара", "Тверь", "Вологда", "Омск", "Уфа"]
# print(c[::2])

# # # ______  Задание 67  ______
# # Объявите в программе следующий список с названиями городов:
# # c = ["Москва", "Ульяновск", "Самара", "Тверь", "Вологда", "Омск", "Уфа"]
# # С помощью срезов выберите из этого списка города через один (начиная со второго) и результат (срез) выведите на экран
# # в виде полученного списка.
# c = ["Москва", "Ульяновск", "Самара", "Тверь", "Вологда", "Омск", "Уфа"]
# print(c[1::2])

# # # ______  Задание 68  ______
# # Объявите в программе следующий список с оценками студента:
# # m = [2, 3, 5, 5, 2, 2, 3, 3, 4, 5, 4, 4]
# # С помощью срезов выберите элементы с 3-го по 7-й (включительно) и выведите их на экран в виде списка в
# # обратном порядке.
# m = [2, 3, 5, 5, 2, 2, 3, 3, 4, 5, 4, 4]
# print(m[6:1:-1])

# # # ______  Задание 69  ______
# #  Объявите в программе следующий список с оценками студента:
# # m = [2, 3, 5, 5, 2, 2, 3, 3, 4, 5, 4, 4]
# # С помощью срезов выберите элементы через один, начиная с последнего, и выведите результат (срез) на экран в виде списка.
# m = [2, 3, 5, 5, 2, 2, 3, 3, 4, 5, 4, 4]
# print(m[-1::-2])

# # # ______  Задание 70  ______
# #  На вход программе подается строка, содержащая целые числа, записанные через пробел. Необходимо прочитать эти числа и
# #  сохранить в списке lst (как числа в порядке их следования в строке). Проверить, если первое число сформированного
# #  списка не равно последнему числу, то в список добавить значение True, а иначе - добавить значение False.
# #  Результирующий список lst вывести на экран командой:
# # print(*lst)
# # Реализовать задачу без использования условных операторов.
# lst = list(map(int, input().split()))  # 8 12 2 -10 6
# lst.append(lst[0] != lst[-1])
# print(*lst) # 8 12 2 -10 6 True

# # # ______  Задание 71  ______
# # Объявите в программе следующий список городов:
# # cities = ["Москва", "Казань", "Ярославль"]
# # Необходимо вставить во вторую позицию (вторым элементом) этого списка строку "Ульяновск". Выведите полученный список
# # на экран командой:
# # print(*cities)
# cities = ["Москва", "Казань", "Ярославль"]
# cities.insert(1, "Ульяновск")
# print(*cities)  # Москва Ульяновск Казань Ярославль

# # # ______  Задание 72  ______
# #  На вход программы подается строка с номером телефона в формате:
# # +7(xxx)xxx-xx-xx
# # Необходимо прочитать эту строку и преобразовать ее в список lst (посимвольно, то есть, элементами списка будут
# # являться отдельные символы строки). Затем, удалить первый '+', число 7 заменить на 8 и убрать дефисы. Отобразить
# # полученный список на экране командой:
# # print("".join(lst))
# lst = list(input().replace("-", ""))  # +7(912)123-45-67
# del lst[0]
# lst[0] = "8"
# print("".join(lst))  # 8(912)1234567

# # # ______  Задание 73  ______
# # На вход программы подается строка с именем, отчеством и фамилией, записанными через пробел. Необходимо прочитать
# # эту строку и представить прочитанные данные в виде новой строки в формате:
# # Фамилия И.О.
# # Например, строка: "Сергей Михайлович Балакирев" преобразуется в строку: "Балакирев С.М."
# fio = list(input().split())  # Сергей Михайлович Балакирев
# str1 = fio[0]
# str2 = fio[1]
# str3 = fio[2]
# str4 = f"{str3} {str1[0].upper()}.{str2[0].upper()}."
# print(str4)  # Балакирев С.М.

# # # ______  Задание 74  ______
# # На вход программы подаются целые числа, записанные в одну строку через пробел (не менее четырех). Необходимо прочитать
# # эти числа и среди них найти три наименьших числа. Выведите на экран найденные три числа в порядке возрастания в одну
# # строчку через пробел. Программу реализовать без использования условного оператора.
# numbers = list(map(int, input().split()))  # 8 11 -5 10 -1 0 7
# numbers.sort()
# print(*numbers[:3])

# # # ______  Задание 75  ______
# # На вход программы подаются целые числа, записанные в одну строку через пробел. Необходимо прочитать эти числа и сохранить
# # их в списке lst. Удалите последнее значение из списка lst и если оно нечетное, то в список (в конец) добавьте булево
# # значение True, а иначе False. Отобразите полученный список на экране командой:
# # print(*lst)
# # Программу реализуйте без использования условного оператора.
# lst = list(map(int, input().split()))  # 8 11 0 3 5 6
# a = lst.pop(-1)
# lst.append(a % 2 != 0)
# print(*lst)  # 8 11 0 3 5 False

# # # ______  Задание 76  ______
# # На вход программы подаются оценки студента (числа от 2 до 5), записанные в одну строку через пробел. Необходимо
# # прочитать эти числа и сохранить их в списке. Определите количество двоек в сформированном списке и выведите это значение
# # на экран.
# lst = list(map(int, input().split()))  # 2 3 5 2 4 2 2 5
# print(lst.count(2))  # 4

# # # ______  Задание 77  ______
# #  На вход программы подается строка с названиями рек, записанными в одну строчку через пробел. Необходимо прочитать
# #  строку и сформировать список lst из названий рек. Затем, отсортировать по возрастанию полученный список по названиям
# #  и в отсортированном списке удалить первый элемент. Результирующий список отобразить на экране в одну строчку через
# #  пробел с помощью команды:
# # print(*lst)
# lst = list(input().split())  # Лена Обь Волга Дон Енисей
# lst.sort()
# del lst[0]
# print(*lst)  # Дон Енисей Лена Обь

# # # ______  Задание 78  ______
# # В программе объявлен следующий список:
# # lst = [5.4, 6.7, 10.4]
# # На вход программе подаются целые числа, записанные через пробел. Необходимо прочитать эти числа и сохранить в отдельном
# # списке digs. Добавить в конец списка lst список digs отдельным элементом (как вложенный). Результирующий список lst
# # вывести на экран командой:
# # print(lst)
# lst = [5.4, 6.7, 10.4]
# digs = list(map(int, input().split()))  # 8 11
# lst.append(digs)
# print(lst)  # [5.4, 6.7, 10.4, [8, 11]]

# # # ______  Задание 79  ______
# # На вход программе подаются три строки стихотворения (каждая с новой строки). Необходимо прочитать эти строки и
# # каждую представить в виде отдельного списка слов (слова разделяются пробелом). Все полученные списки вложить в список
# # lst и вывести его командой:
# # print(lst)
# str1 = list(input().split())  # Мороз и солнце день чудесный
# str2 = list(input().split())  # Еще ты дремлешь друг прелестный
# str3 = list(input().split())  # Пора красавица проснись
# lst = [str1, str2, str3]
# print(lst)
# # [['Мороз', 'и', 'солнце', 'день', 'чудесный'], ['Еще', 'ты', 'дремлешь', 'друг', 'прелестный'], ['Пора', 'красавица', 'проснись']]

# # # ______  Задание 80  ______
# # На вход программе подается матрица чисел из трех строк. В каждой строке числа разделяются пробелом. Необходимо
# # прочитать эти числа и сохранить в виде двумерного (вложенного) списка. Затем, вывести на экран последний столбец
# # этой матрицы (двумерного списка) в виде строки из трех чисел, записанных через пробел.
# numbers1 = list(map(int, input().split()))  # 8 11 12 1
# numbers2 = list(map(int, input().split()))  # 9 4 36 -4
# numbers3 = list(map(int, input().split()))  # 1 12 49 5
# lst = [numbers1, numbers2, numbers3]
# lst2 = [lst[0][-1], lst[1][-1], lst[2][-1]]
# print(*lst2)

# # # ______  Задание 81  ______
# #  В программе объявлен следующий вложенный список из трех строк:
# # t = [["Скажи-ка", "дядя", "ведь", "не", "даром"],
# #     ["Я", "Python", "выучил", "с", "каналом"],
# #     ["Балакирев", "что", "раздавал?"]]
# # На вход программе подается строка, содержащее одно слово. Необходимо прочитать это слово и реализовать проверку на
# # наличие его в списке t. Результат (булево True или False) вывести на экран. Решить задачу необходимо без применения
# # условного оператора.
# t = [["Скажи-ка", "дядя", "ведь", "не", "даром"],
#     ["Я", "Python", "выучил", "с", "каналом"],
#     ["Балакирев", "что", "раздавал?"]]
# word = input()  # дядя
# print(word in t[0] or word in t[1] or word in t[2])  # True

# # # ______  Задание 82  ______
# # На вход программе подаются два вещественных числа, записанных в одну строку через пробел. Необходимо их прочитать и
# # вывести на экран наибольшее из этих чисел. Задачу решить с помощью условного оператора.
# lst = list(map(float, input().split()))  # 8.7 11.0
# if lst[0] > lst[1]:
#     print(lst[0])
# else:
#     print(lst[1])
# # 11.0

# # # ______  Задание 83  ______
# #  На вход программе подается строка со словом. Необходимо его прочитать и определить, является ли это слово палиндромом
# #  (одинаково читается вперед и назад, например, АННА). Регистр букв не учитывать, т.е. Анна, анна, аННА - это все должно
# #  определяться, как палиндромы. Если введенное слово палиндром, на экран вывести "ДА", иначе "НЕТ"
# str1 = input()  # Шалаш
# str2 = str1[::-1]
# if str1.lower() == str2.lower():
#     print("ДА")
# else:
#     print("НЕТ")
# # ДА

# # # ______  Задание 84  ______
# # На вход программе подаются два целых положительных числа, записанных в одну строку через пробел. Необходимо прочитать
# # эти числа в переменные m и n (в порядке считывания). Определить, если число m делится нацело на число n, то вывести
# # на экран частное от деления (результат деления) в виде целого числа. В противном случае вывести сообщение «m на
# # n нацело не делится» (без кавычек) и вместо m и n подставить соответствующие числа, например: «13 на 2 нацело не делится».
# m, n = map(int, input().split())  # 8 4
# if m % n == 0:
#     print(int(m/n))
# else:
#     print(f"{m} на {n} нацело не делится")
# # 2

# # # ______  Задание 85  ______
# # На вход программе подаются три целых положительных числа, записанных в одну строку через пробел. Необходимо прочитать
# # эти числа и убедиться, что первые два числа - это катеты прямоугольного треугольника, а третье - его гипотенуза.
# # (Подсказка: проверка делается по теореме Пифагора
# # Если проверка проходит (истина), то вывести на экран "ДА", иначе "НЕТ".
# num1, num2, num3 = map(int, input().split())  # 3 4 5
# if num3 ** 2 == num1 ** 2 + num2 ** 2:
#     print("ДА")
# else:
#     print("НЕТ")
# # ДА

# # # ______  Задание 86  ______
# # На вход программе подается четырехзначное число, которое нужно прочитать из входного потока. Проверить, что это число
# # оканчивается на цифру 7. Вывести на экран "ДА", если это так, и "НЕТ" в противном случае.
# num1 = input()  # 8117
# if num1[-1] == "7":
#     print("ДА")
# else:
#     print("НЕТ")
# # ДА

# # # ______  Задание 87  ______
# # На вход программе подается слово (строка). Необходимо прочитать это слово и проверить, что в нем присутствуют все три
# # буквы: t, h и o (в произвольном порядке и хотя бы в одном экземпляре). Реализовать программу следует с помощью одного
# # условного оператора. Если искомая проверка проходит, вывести "ДА", иначе "НЕТ".
# str1 = input()  # Python
# if "t" in str1 and "h" in str1 and "o" in str1:
#     print("ДА")
# else:
#     print("НЕТ")
# # ДА

# # # ______  Задание 88  ______
# # На вход программе подается строка из названий городов, записанных через пробел. Необходимо прочитать эту строку и
# # сформировать на ее основе список cities из названий городов. Затем, проверить, если в списке cities присутствует город
# # Москва, то удалить этот элемент из списка. Вывести на экран результирующий список cities командой:
# # print(*cities)
# cities = list(input().split())  # Уфа Астрахань Москва Самара Казань
# if "Москва" in cities:
#     cities.remove("Москва")
# print(*cities)
# # Уфа Астрахань Самара Казань

# # # ______  Задание 89  ______
# #  На вход программе подаются четыре целых числа a, b, c, d, записанных в одну строку через пробел. Необходимо прочитать
# #  эти числа и определить, войдет ли в конверт с внутренними размерами a и b мм (первые два числа) прямоугольная открытка
# #  с размерами с и d мм (следующие два числа). Для размещения открытки в конверте необходим зазор в 1 мм с каждой стороны.
# #  Открытку можно поворачивать на 90 градусов. Вывести "ДА", если открытка входит, и "НЕТ" в противном случае.
# a, b, c, d = map(int, input().split())  # 12 5 7 2
# if (a - 1) > c and (b  - 1) > d or (a-1) > d and (b - 1) > c:
#     print("ДА")
# else:
#     print("НЕТ")
# # ДА

# # # ______  Задание 90  ______
# #  На вход программе подается шестизначное число. Необходимо его прочитать и определить, является ли это число счастливым.
# #  (Счастливым называют такое шестизначное число, в котором сумма его первых трех цифр равна сумме последних трех его цифр.).
# #  Вывести "ДА", если число счастливое, и "НЕТ" в противном случае.
# n = input()  # 811235
# if int(n[0]) + int(n[1]) + int(n[2]) == int(n[3]) + int(n[4]) + int(n[5]):
#     print("ДА")
# else:
#     print("НЕТ")
# # ДА

# # # ______  Задание 91  ______
# # Работа светофора для пешеходов запрограммирована следующим образом: в начале каждого часа в течение трех минут горит
# # зеленый сигнал, затем в течение двух минут – красный, в течение трех минут – опять зеленый и т. д., процесс повторяется.
# # На вход программе подается вещественное число t, означающее время в минутах, прошедшее с начала очередного часа.
# # Необходимо прочитать это число и определить, сигнал какого цвета горит для пешеходов в момент времени t (прочитанного
# # из входного потока). На экран вывести сообщение (без кавычек):
# # "green" - для зеленого;
# # "red" - для красного.
# t = float(input())
# if t % 5 < 3:  # 12.5
#     print("green")
# else:
#     print("red")
# # green

# # # ______  Задание 92  ______
# # Объявите в программе следующую многострочную переменную (меню):
# # m = '''1. Введение в Python
# # 2. Строки и списки
# # 3. Условные операторы
# # 4. Циклы
# # 5. Словари, кортежи и множества
# # 6. Выход'''
# # Эту строку можно разбить на отдельные строки, если вы видите в этом необходимость.
# # Далее, на вход программы подается целое число от 1 до 6. Необходимо его прочитать и вывести пункт меню, связанный
# # с этим числом. Реализовать программу с использованием операторов if-elif
# m = '''1. Введение в Python
# 2. Строки и списки
# 3. Условные операторы
# 4. Циклы
# 5. Словари, кортежи и множества
# 6. Выход'''
#
# num1 = int(input()) # 2
# if num1 == 1:
#     print("1. Введение в Python")
# elif num1 == 2:
#     print("2. Строки и списки")
# elif num1 == 3:
#     print("3. Условные операторы")
# elif num1 == 4:
#     print("4. Циклы")
# elif num1 == 5:
#     print("5. Словари, кортежи и множества")
# elif num1 == 6:
#     print("6. Выход")
# # 2. Строки и списки

# # # ______  Задание 93  ______
# # На вход программе подаются три целых числа, записанных в одну строку через пробел. Необходимо прочитать их и определить
# # наименьшее среди прочитанных чисел. Наименьшее найденное значение вывести на экран.
# # P.S. Программу реализовать следует, используя условный оператор, без использования функции min.
# a, b, c = map(int, input().split())  # 8 11 -1
# if a < b:
#     if a < c:
#         print(a)
#     else:
#         print(c)
# else:
#     if b < c:
#         print(b)
#     else:
#         print(c)
# # -1

# # # ______  Задание 94  ______
# #  На вход программе подается вещественное число: вес боксера-любителя (в кг). Прочитайте это число и определите номер
# #  категории, в которой будет выступать боксер.
# # Боксер может быть отнесен к одной из следующих весовых категорий:
# # 1) легкий вес – до 60 кг (включительно);
# # 2) первый полусредний вес – до 64 кг (включительно);
# # 3) полусредний вес – до 69 кг (включительно);
# # 4) остальные - более 69 кг.
# weight = float(input())  # 62.4
# if weight <= 60:
#     print(1)
# elif 60 < weight <= 64:
#     print(2)
# elif 64 < weight <= 69:
#     print(3)
# else:
#     print(4)
# # 2

# # # ______  Задание 95  ______
# # На вход программе подается целое число: порядковый номер дня недели (1, 2, ..., 7). Необходимо прочитать это число и
# # вывести на экран название дня недели:
# # понедельник, вторник, среда, четверг, пятница, суббота, воскресенье
# # Программу реализовать с использованием операторов if-elif.
# n = input()  # 2
# if n == "1":
#     print("понедельник")
# elif n == "2":
#     print("вторник")
# elif n == "3":
#     print("среда")
# elif n == "4":
#     print("четверг")
# elif n == "5":
#     print("пятница")
# elif n == "6":
#     print("суббота")
# elif n == "7":
#     print("воскресенье")
# # вторник

# # # ______  Задание 96  ______
# # На вход программе подается целое число: порядковый номер месяца (1, 2, ..., 12). Прочитайте это число (месяц) и
# # выведите на экран количество дней в месяце, которому соответствует прочитанное число.
# # При решении задачи принять, что год не является високосным. Программу реализовать через условный оператор, в котором
# # следует использовать не более трех ветвей (блоков).
# # P.S. Число дней в месяцах не високосного года, начиная с января: 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
# mounth = input()  # 2
# lst1 =["1", "3", "5", "7", "8", "10", "12"]
# lst2 = ["4", "6", "9", "11"]
# lst3 = ["2"]
# if mounth in lst1:
#     print(31)
# elif mounth in lst2:
#     print(30)
# elif mounth in lst3:
#     print(28)
# # 28

# # # ______  Задание 97  ______
# # На вход программе подаются два целых числа, записанных через пробел. Необходимо прочитать эти числа по порядку в
# # переменные m (порядковый номер месяца) и n (число, день месяца). Затем, по переменным m и n определить:
# # а) дату предыдущего дня (принять, что m и n не могут являться 1 января);
# # б) дату следующего дня (принять, что m и n не могут являться 31 декабря).
# # В задаче принять, что год не является високосным. Вывести предыдущую дату и следующую дату (в формате: mm.dd, где
# # m - число месяца; d - номер дня) в одну строчку через пробел.
# # P.S. Число дней в месяцах не високосного года, начиная с января: 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
# m, n = map(int, input().split())  # 8 31
# lst1 = [1, 3, 5, 7, 8, 10, 12]
# lst2 = [4, 6, 9, 11]
# lst3 = [2]
# last_m = next_m = m
# if m in lst1:
#     if n != 1 and n != 31:
#         last_day = n - 1
#         next_day = n + 1
#     elif n == 1:
#         if m - 1 in lst1:
#             last_day = 31
#
#         elif m - 1 in lst2:
#             last_day = 30
#         elif m - 1 in lst3:
#             last_day = 28
#         last_m = m - 1
#         next_m = m
#         next_day = n + 1
#     elif n == 31:
#         last_day = n - 1
#         next_day = 1
#         last_m = m
#         next_m = m + 1
#
# if m in lst2:
#     if n != 1 and n != 30:
#         last_day = n - 1
#         next_day = n + 1
#     elif n == 1:
#         if m - 1 in lst1:
#             last_day = 31
#         elif m - 1 in lst2:
#             last_day = 30
#         elif m - 1 in lst3:
#             last_day = 28
#         next_day = n + 1
#         last_m = m - 1
#         next_m = m
#     elif n == 30:
#         last_day = n - 1
#         next_day = 1
#         last_m = m
#         next_m = m + 1
#
# if m in lst3:
#     if n != 1 and n != 28:
#         last_day = n - 1
#         next_day = n + 1
#     elif n == 1:
#         if m - 1 in lst1:
#             last_day = 31
#         elif m - 1 in lst2:
#             last_day = 30
#         elif m - 1 in lst3:
#             last_day = 28
#         next_day = n + 1
#         last_m = m - 1
#         next_m = m
#     elif n == 28:
#         last_day = n - 1
#         next_day = 1
#         last_m = m
#         next_m = m + 1
# last_day = str(last_day).rjust(2, "0")
# last_m = str(last_m).rjust(2, "0")
# next_m = str(next_m).rjust(2, "0")
# next_day = str(next_day).rjust(2, "0")
# print(f"{last_m}.{last_day} {next_m}.{next_day}")

# # # ______  Задание 98  ______
# # На вход программе подается целое число k (1 <= k <= 365). Прочитайте это число и определите, каким днем недели
# # (понедельник, вторник, среда, четверг, пятница, суббота или воскресенье) является k-й день не високосного года,
# # в котором 1 января является понедельником.
# num1 = int(input())  # 121
# days = ["понедельник", "вторник", "среда", "четверг", "пятница" , "суббота", "воскресенье"]
# weeks = num1 // 7
# n = num1 - (weeks * 7)
# if n == 7:
#     print(days[6])
# elif n == 6:
#     print(days[5])
# elif n == 5:
#     print(days[4])
# elif n == 4:
#     print(days[3])
# elif n == 3:
#     print(days[2])
# elif n == 2:
#     print(days[1])
# else:
#     print(days[0])
# # вторник

# # # ______  Задание 99  ______
# # На вход программе подаются два вещественных числа, каждое с новой строки. Необходимо их прочитать и с помощью
# # тернарного условного оператора вычислить наибольшее среди них и присвоить переменной d. Полученное значение переменной
# # d вывести на экран.
# n = float(input())  # 5.4
# m = float(input())  # -3.8
# d = m if m > n else n
# print(d)
# # 5.4

# # # ______  Задание 100  ______
# # На вход программе подается целое число. Необходимо его прочитать и переменной msg присвоить строку:
# # "кратно 3", если введенное число кратно 3;
# # "не кратно 3", если введенное число не кратно 3.
# # Программу реализовать с использованием тернарного оператора. Значение переменной msg вывести на экран.
# n = int(input())  # 9
# msg = "кратно 3" if n % 3 == 0 else "не кратно 3"
# print(msg)  # кратно 3

# # # ______  Задание 101  ______
# # На вход программе подается слово (строка). Необходимо ее прочитать и переменной msg присвоить строку "палиндром", если
# # введенное слово является палиндромом (одинаково читается и вперед и назад), иначе присвоить строку "не палиндром".
# # Проверку на палиндром проводить без учета регистра. Программу реализовать с помощью тернарного условного оператора.
# # Значение переменной msg отобразить на экране.
# str1 = input()  # Казак
# msg = "палиндром" if str1.lower() == str1[::-1].lower() else "не палиндром"
# print(msg)  # палиндром

# # # ______  Задание 102  ______
# #  На вход программе подается целое число 0 или 1. Необходимо его прочитать и преобразовать в строку по правилу:
# # 0 -> "False"
# # 1 -> "True"
# # Программу реализовать с помощью тернарного условного оператора. Результат (строку) отобразить на экране.
# n = int(input())  # 1
# msg = "False" if n == 0 else "True"
# print(msg)  # True

# # # ______  Задание 103  ______
# # На вход программе подается целое число: текущее время (секунды) в диапазоне [0; 59]. Необходимо его прочитать и
# # вычислить следующее за ним значение в секундах с учетом границ диапазона [0; 59]. То есть, если прочитанное значение
# # равно 59, то следующее должно быть равно 0. И так по кругу.
# # Реализуйте программу с помощью тернарного условного оператора. Результат (следующее значение) отобразите на экране.
# # P.S. Попробуйте также реализовать эту же задачу с использованием только арифметических операций.
# n = int(input())  # 55
# num1 = 0 if n == 59 else n + 1
# print(num1)  # 56

# # # ______  Задание 104  ______
# # Объявите в программе следующий список названий нот:
# # m = ['до', 'ре', 'ми', 'фа', 'соль', 'ля', 'си']
# # Затем, на вход программе подаются три целых числа в диапазоне от 1 до 7 в одну строчку через пробел: номера нот.
# # Необходимо прочитать эти числа и сформировать строку с названиями прочитанных номеров нот, следующих в строчку через
# # пробел. Дополнительно перед нотами до и фа поставить символ диеза '#'.
# # Реализовать программу с использованием тернарного условного оператора (он может применяться несколько раз).
# m = ['до', 'ре', 'ми', 'фа', 'соль', 'ля', 'си']
# n1, n2, n3 = map(int, input().split())  # 1 6 7
# m1 = "#" + m[n1 - 1] if m[n1 - 1] == m[0] or m[n1 - 1] == m[3] else m[n1 - 1]
# m2 = "#" + m[n2 - 1] if m[n2 - 1] == m[0] or m[n2 - 1] == m[3] else m[n2 - 1]
# m3 = "#" + m[n3 - 1] if m[n3 - 1] == m[0] or m[n3 - 1] == m[3] else m[n3 - 1]
# print(m1, m2, m3)  # #до ля си

# # # ______  Задание 105  ______
# # На вход программы подаются два целых положительных числа n и m, записанных через пробел, причем, n < m. Необходимо
# # прочитать эти числа и вывести в одну строку через пробел квадраты целых чисел в диапазоне [n; m]. Программу
# # реализовать при помощи цикла while.
# n, m = map(int, input().split())  # 2 4
# while n <= m:
#     print(n ** 2, end=" ")
#     n += 1
# # 4 9 16

# # # ______  Задание 106  ______
# #  На вход программы подается вещественное число: стоимость одной книги x рублей. Необходимо прочитать это число и
# #  вывести на экран в одну строчку через пробел стоимости 2, 3, ... 10-ти таких книг с точностью до десятых. Программу
# #  реализовать при помощи цикла while.
# price = float(input())  # 34.6
# i = 2
# while i < 11:
#     print(round(price * i, 1), end=" ")
#     i += 1
# # 69.2 103.8 138.4 173.0 207.6 242.2 276.8 311.4 346.0

# # # ______  Задание 107  ______
# # На вход программы подается целое положительное число n. Прочитайте это число, а затем, вычислите и выведите на экран
# # следующую сумму с точностью до тысячных (три знака после запятой):
# # Программу реализовать при помощи цикла while.
# n = int(input())   # 8
# i = 1
# s = 0
# while i <= n:
#     s = s + 1 / i
#     i += 1
# print(round(s, 3))  # 2.718

# # # ______  Задание 108  ______
# #  Написать программу, в которой пользователь на каждой итерации цикла (while) должен вводить целое число. Цикл должен
# # #  продолжаться, пока пользователь не введет число 0. Необходимо вычислить сумму введенных в цикле чисел и вывести
# # #  результат (сумму) на экран. Программу реализовать при помощи цикла while.
# # s = 0
# # i = 1
# # while i != 0:
# #     i = int(input())  # 8 # 11 # 2 # -4 # 0
# #     s += i
# #
# # print(s) # 17

# # # ______  Задание 109  ______
# # На вход программе подается строка (слаг). Прочитайте эту строку и замените в ней все подряд идущие дефисы (--, ---,
# # ---- и т.д.) на одинарные (-). Результат преобразования строки выведите на экран. Программу реализовать при помощи
# # цикла while.
# stroke = input()  # osnovnye--metody-----slovarey
# new_stroke = stroke
# while "--" in new_stroke:
#     new_stroke = new_stroke.replace("--", "-")
# print(new_stroke)  # osnovnye-metody-slovarey

# # # ______  Задание 110  ______
# # На вход программе подается натуральное число (то есть, целое положительное) от трехзначного и более. Необходимо
# # прочитать это число и найти произведение всех его цифр. Результат (произведение) вывести на экран. Программу
# # реализовать при помощи цикла while.
# number_stroke = input()  # 821
# i = 0
# number_sum = int(number_stroke[i])
# while i < len(number_stroke) - 1:
#     number_sum *= int(number_stroke[i + 1])
#     i += 1
#
# print(number_sum)  # 16

# # # ______  Задание 111  ______
# #  Последовательность Фибоначчи образуется так: первые два числа равны 1 и 1, а каждое последующее равно сумме двух
# #  предыдущих. В итоге, получаем такую последовательность чисел: 1, 1, 2, 3, 5, 8, 13, ...
# # На вход программе подается целое положительное число n (n >= 2). Прочитайте это число и сформируйте последовательность
# # Фибоначчи длиной n. Например, при n = 4 получается последовательность:
# # 1 1 2 3
# # Результат отобразите в виде строки полученных чисел, записанных через пробел. Программу реализовать при помощи цикла while.
# n = int(input())  # 8
# i = 1
# lst = [1, 1]
# while i < n - 1:
#     lst.append(lst[i - 1] + lst[i])
#     i += 1
# print(*lst)  # 1 1 2 3 5 8 13 21

# # # ______  Задание 112  ______
# # На вход программе подается целое положительное число n (количество часов). Прочитайте это число и сохраните в переменной n.
# # Пусть одноклеточная амеба каждые 3 часа делится на 2 клетки. Необходимо определить, сколько клеток будет через n часов.
# # Считать, что изначально была одна амеба.
# # Результат (итоговое число клеток) вывести на экран. Задачу необходимо решить с использованием цикла while.
# n = int(input())  # 11
# i = 3
# multi = 1
# while i < n:
#     multi *= 2
#     i += 3
#
# print(multi)  # 8

# # # ______  Задание 113  ______
# # Гражданин 1 января открыл счет в банке, вложив 1000 руб. Каждый год размер вклада увеличивается на 5% от имеющейся
# # суммы. Определить сумму вклада через n лет (n - целое положительное число, читаемое из входного потока). Результат
# # (сумму вклада) округлить до сотых и вывести на экран. Программу реализовать при помощи цикла while.
# n = int(input())  # 5
# i = 1
# s = 1000
#
# while i <= n:
#     s += s * 5 / 100
#     i += 1
# print(round(s, 2))  # 1276.28

# # # ______  Задание 114  ______
# # На вход программе подаются два натуральных числа n и m, записанных в одну строчку через пробел, причем n < m.
# # Необходимо прочитать эти числа и напечатать все нечетные числа из интервала [n, m]. Задачу следует решить без
# # применения условного оператора. Результат вывести на экран в виде строки чисел, записанных через пробел. Программу
# # реализовать при помощи цикла while
# n, m = map(int, input().split())  # 2 10
# i = n
# lst = []
# while i <= m:
#     while i % 2 == 0:
#         i += 1
#
#     lst.append(i)
#     i += 2
# print(*lst)

# # # ______  Задание 115  ______
# # Составить программу поиска всех трехзначных чисел, которые при делении на 47 дают в остатке 43 и кратны 3. Вывести
# # найденные числа в одну строчку через пробел в порядке возрастания. Программу реализовать при помощи цикла while.
# start = 100
# end = 999
# lst = []
# while start < end:
#     if start % 47 == 43 and start % 3 == 0:
#         lst.append(start)
#         start += 1
#     start += 1
# lst.sort()
# print(*lst)  # 231 372 513 654 795 936

# # # ______  Задание 116  ______
# # Объявите в программе следующий одномерный список длиной 10 элементов, состоящий из нулей:
# # p = [0] * 10
# # На каждой итерации цикла запрашивайте у пользователя ввод целого числа - индекс элемента списка p, по которому
# # записывается значение 1, если ее там еще нет. Если же 1 уже проставлена по текущему индексу, то список не менять.
# # Необходимо расставить так пять единиц в списке p. После этого цикл прерывается.
# # Программу реализовать с помощью цикла while и с использованием оператора continue, когда 1 уже проставлена в списке
# # по текущему индексу, чтобы запросить другой индекс. Результат вывести на экран в виде последовательности чисел,
# # записанных через пробел.
# p = [0] * 10
# s = 0
# while s != 5:
#     i = int(input())  # 1 -> 2 -> 2 -> 5 -> 7 -> 5  -> 9
#     if p[i] != 1:
#         p[i] = 1
#         s += 1
#     else:
#         continue
#
# print(*p)

# # # ______  Задание 117  ______
# # Напишите программу, в которой на каждой итерации цикла (while) читается (из входного потока) целое число. Необходимо
# # подсчитать произведение только положительных чисел, до тех пор, пока не встретится число 0. Реализовать пропуск
# # вычислений с помощью оператора continue, а также использовать цикл while. Полученное произведение вывести на экран.
# flag = True
# res = 1
# while flag:
#     i = int(input())  # 2 -> -1 -> 3 -> 2 -> -5 -> 7 -> 0
#     if i > 0:
#         res *= i
#     elif i == 0:
#         flag = False
#         break
#     else:
#         continue
# print(res)  # 84

# # # ______  Задание 118  ______
# # На вход программе подается строка с названиями городов, записанных в одну строчку через пробел. Прочитайте эту строку
# # и сформируйте на ее основе список из названий городов. Необходимо определить, что в этом списке все города имеют длину
# # более 5 символов. Если это так, то на экран вывести строку "ДА", иначе строку "НЕТ". Программу реализовать с
# # использованием цикла while и оператора break.
# cities = list(input().split())  # Самара Ульяновск Новгород Воронеж
# i = 0
#
# while i < len(cities):
#     if len(cities[i]) <= 5:
#         print("НЕТ")
#         break
#     else:
#         i += 1
#         if i < len(cities):
#             continue
#     print("ДА")
#     break
# # ДА

# # # ______  Задание 119  ______
# #  На вход программе подается строка с именами студентов, записанных в одну строчку через пробел. Прочитайте эту строку
# #  и сформируйте на ее основе список из имен студентов. Необходимо определить, что в этом списке хотя бы одно имя
# #  начинается и заканчивается на ту же самую букву (без учета регистра). Если это так, то на экран вывести строку "ДА",
# #  иначе строку "НЕТ". Программу реализовать с использованием цикла while и оператора break.
# names = input().split()  # Петр Анна Иван Сергей Михаил Федор
# i = 0
# while i < len(names):
#     if names[i][0].lower() == names[i][-1]:
#         print("ДА")
#         break
#     i += 1
# else:
#     print("НЕТ")
# # ДА

# # # ______  Задание 120  ______
# # На вход программе подается натуральное число n (то есть, целое положительное). Прочитайте это число. В цикле
# # переберите все целые числа в интервале [1; n] (включая границы) и сформируйте список из чисел, кратных 3 и 5 одновременно.
# # Выведите на экран полученный список чисел в одну строчку через пробел, если значение n меньше 100. Иначе выведите на
# # экран сообщение (без кавычек):
# # "слишком большое значение n"
# # Продумать логику работы программы так, чтобы после цикла while шел блок else.
# n = int(input())  # 49 -> # 100
# i = 1
# lst= []
# while i <= n:
#     if n >= 100:
#         print("слишком большое значение n")
#         break
#     if i % 3 == 0 and i % 5 == 0:
#         lst.append(i)
#     i += 1
# else:
#     print(*lst)
# # 15 30 45 -> # слишком большое значение n

# # # ______  Задание 121  ______
# # На вход программе подается натуральное число n. Прочитайте это число и выведите первое найденное натуральное число
# # (то есть, перебирать числа, начиная с 1), квадрат которого больше значения n. Программу реализовать с использованием
# # цикла while.
# n = int(input())# 10
# i = 1
# while i ** 2 <= n:
#     i += 1
# print(i)
# # 4

# # # ______  Задание 122  ______
# # (На использование цикла while). Начав тренировки, лыжник в первый день пробежал 10 км. Каждый следующий день он
# # увеличивал пробег на 10 % от пробега предыдущего дня. Определить в какой день он пробежит больше x км
# # (натуральное число x читается из входного потока). Результат (искомый день) вывести на экран.
# x = int(input())
# i = 10
# d = 1
# while i <= x:
#     i += i * 0.1
#     d += 1
# print(d)

# # # ______  Задание 123  ______
# # (На использование цикла while). На вход программы подаются строки (названия книг). В программе уже реализовано их
# # чтение и сохранение в списке (каждый элемент - название книги). После этого, из полученного списка нужно удалить все
# # названия, состоящие из двух и более слов (слова разделяются пробелом). Результат выведите на экран в виде строки из
# # оставшихся названий через пробел.
#
# import sys
#
# # считывание списка из входного потока
# lst_in = list(map(str.strip, sys.stdin.readlines()))  # Муму -> Евгений Онегин -> Сияние -> Мастер и Маргарита -> Пиковая дама -> Колобок
# i = 0
# new_lst = []
# # здесь продолжайте программу (используйте список lst_in)
# while i < len(lst_in):
#     if len(lst_in[i].split()) == 1:
#         new_lst.append(lst_in[i])
#     i += 1
# print(*new_lst)

# # # ______  Задание 124  ______
# # Используя функцию range(), выведите на экран последовательность целых чисел 0, 1, 2, ..., 10 в одну строчку через пробел.
# for i in range(11):
#     print(i, end=" ") # 0 1 2 3 4 5 6 7 8 9 10

# # # ______  Задание 125  ______
# # Используя функцию range(), выведите на экран последовательность целых чисел -10, -9, -8, ..., 0 в одну строчку через пробел.
# for i in range(-10, 1):
#     print(i, end=" ")  # -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0

# # # ______  Задание 126  ______
# # Используя функцию range(), выведите на экран последовательность целых чисел -10, -8, -6, -4, -2 в одну строчку через пробел
# for i in range(-10, -1, 2):
#     print(i, end=" ")  # -10 -8 -6 -4 -2

# # # ______  Задание 127  ______
# # Используя функцию range(), выведите на экран последовательность целых чисел 1, 4, 7, 10, 13, 16, 19 в одну строчку через пробел.
# for i in range(1, 20, 3):
#     print(i, end=" ")  # 1 4 7 10 13 16 19

# # # ______  Задание 128  ______
# # На вход программе подаются целые числа, записанные в одну строчку через пробел. Необходимо прочитать эти числа и
# # сохранить в списке (в виде чисел, а не строк). Затем, с помощью цикла for перебрать полученный список и просуммировать
# # все нечетные значения. Результат (сумму) вывести на экран.
# numbers = map(int, input().split())  # 8 11 -2 4 0 13 19 12 7
# s = 0
# for i in numbers:
#     if i % 2 != 0:
#         s += i
# print(s)  # 50

# # # ______  Задание 129  ______
# # На вход программе подается строка с названиями городов, записанных в одну строчку через пробел. Необходимо прочитать
# # эту строку и сформировать список из названий городов. Затем, перебрать полученный список циклом for и заменить названия
# # городов на длины их строк. Результат вывести на экран в виде последовательности чисел через пробел в одну строчку.
# cities = input().split()  # Москва Уфа Караганда Тверь Минск Казань
# for i in range(len(cities)):
#     cities[i] = len(cities[i])
# print(*cities)  # 6 3 9 5 5 6

# # # ______  Задание 130  ______
# # На вход программе подается натуральное число n. Прочитайте это число и с помощью цикла for найдите все делители этого
# # числа (то есть, целые числа от 1 до n, которые делят число n нацело). Найденные делители выводить сразу в столбик без
# # формирования списка.
# n = int(input())  # 12
# for i in range(1, n + 1):
#     if n % i == 0:
#         print(i)
# # 1
# # 2
# # 3
# # 4
# # 6
# # 12

# # # ______  Задание 131  ______
# # На вход программе подается натуральное число n. Прочитайте это число и с помощью цикла for определите, является ли оно
# # простым (то есть, делится нацело только на само себя и на 1). Вывести на экран строку "ДА", если n простое и строку
# # "НЕТ" в противном случае.
# n = int(input())
# s = 0  # 11
# for i in range(2, n):
#     if n % 2 == 0:
#         s += 1
#
# print("ДА" if s == 0 else "НЕТ") # ДА

# # # ______  Задание 132  ______
# #  На вход программе подается строка с названиями городов, записанных в одну строчку через пробел. Необходимо прочитать
# #  эту строку и сформировать список из названий городов. Переберите полученный список с помощью цикла for и определите,
# #  начинается ли название следующего города на последнюю букву предыдущего города в списке. Если последними встречаются
# #  буквы 'ь', 'ъ', 'ы', то берется следующая с конца буква. Вывести на экран "ДА", если последовательность удовлетворяет
# #  этому правилу и "НЕТ" в противном случае.
# cities = input().split()  # Москва Астрахань Новгород Димитровград Душанбе
# simbols = ['ь', 'ъ', 'ы']
# d1 = ""
# d2 = ""
# lst = []
# for i in range(1, len(cities)):
#     if cities[i - 1][-1] in simbols:
#         d2 = cities[i - 1][-2].lower()
#     else:
#         d2 = cities[i - 1][-1].lower()
#     d1 = cities[i][0].lower()
#     if d1 == d2:
#         lst.append("+")
#     else:
#         lst.append("-")
# if "-" in lst:
#     print("НЕТ")
# else:
#     print("ДА")
# # ДА

# # # ______  Задание 133  ______
# # На вход программе подается натуральное число n. Прочитайте это число и вычислите сумму всех натуральных чисел меньше n,
# # которые кратны или 3 или 5. Результат (сумму) выведите на экран.
# # Пример: n = 10, имеем числа: 3, 5, 6, 9. Их сумма равна 23.
# n = int(input())  # 21
# s = 0
# for i in range(1, n):
#     if i % 3 == 0 or i % 5 == 0:
#         s += i
# print(s)  # 98

# # # ______  Задание 134  ______
# # На вход программе подается строка. Необходимо ее прочитать и найти в ней все индексы строкового фрагмента "ра".
# # Выведите найденные индексы на экран в одну строчку через пробел. Если же фрагмент "ра" отсутствует в строке,
# # то вывести -1.
#
# str1 = input().lower()  # Барабанщик бил бой в барабан
# lst = []
# for i in range(1, len(str1)):
#     if str1[i - 1] + str1[i] == "ра":
#         lst.append(i - 1)
#     if i == len(str1) - 1 and lst == []:
#         lst.append(-1)
#
# print(*lst)  # 2 23

# # # ______  Задание 135  ______
# # На вход программе подается строка с номером телефона. Ожидается следующий формат номера в строке:
# # +7(xxx)xxx-xx-xx
# # где x - это любая цифра. Число введенных символов считается верным (то есть, не может быть, чтобы отсутствовала
# # какая-либо цифра или была лишняя). Необходимо прочитать строку из входного потока и проверить, что она содержит номер
# # телефона в соответствии с приведенным форматом. Вывести "ДА", если это так и "НЕТ" в противном случае.
# number = input()  # +7(123)456-78-99
# template = "+7(xxx)xxx-xx-xx"
# lst = []
# for i, v in enumerate(number):
#     if v == template[i] and v != "x":
#         lst.append("+")
#     elif v.isdigit() and i != 1:
#         lst.append("+")
#     else:
#         lst.append("-")
# if "-" in lst:
#     print("НЕТ")
# else:
#     print("ДА")

# # # ______  Задание 136  ______
# # На вход программе подается строка, в которой записано арифметическое выражение. Например:
# # "10 + 25 - 12"
# # или
# # "10 + 25 - 12 + 20 - 1 + 3"
# # и т. д. То есть, количество действий может быть произвольным.
# # Необходимо прочитать эту строку из входного потока и выполнить вычисление, записанного в ней арифметического выражения.
# # Результат вычисления отобразить на экране.
# # Полагается, что в качестве арифметических операций используется только сложение (+) и вычитание (-), а в качестве
# # операндов только целые неотрицательные числа. Следует учесть, что математические операции могут быть записаны как
# # с пробелами (до и после), так и без них.
# # P.S. В целях обучения программу следует делать без использования функции eval.
# stroke = input()  # 10+25 - 12
# lst = []
# number = ''
# s = 0
# start = True
# for i in range(len(stroke)):
#     if stroke[i].isdigit():
#         number += stroke[i]
#     elif stroke[i] == ' ':
#         continue
#     else:
#         lst.append(number)
#         number = ''
#         if stroke[i] == '+' or stroke[i] == '-':
#             lst.append(stroke[i])
# lst.append(number)
# for i in range(0, len(lst) - 1):
#     if i == 0:
#         s += int(lst[0])
#     else:
#         if lst[i] == '+':
#             s += int(lst[i + 1])
#         if lst[i] == '-':
#             s -= int(lst[i + 1])
# print(s)

# # # ______  Задание 137  ______
# # На вход программе подаются целые числа, записанные в одну строку через пробел. Необходимо прочитать эти числа и
# # сохранить в списке. Затем, каждое значение этого списка изменить на квадрат соответствующего числа. Результат (список)
# # выведите на экран в виде последовательности чисел, записанных через пробел. Программу следует реализовать с
# # использованием функции enumerate.
# numbers = map(int, input().split())  # 8 -11 4 3 6
# for i, v in enumerate(numbers):
#     print(v ** 2, end=" ")  # 64 121 16 9 36

# # # ______  Задание 138  ______
# # На вход программе подаются целые числа, записанные в одну строку через пробел. Необходимо прочитать эти числа и
# # сохранить в списке. Затем, каждый элемент этого списка продублировать один раз. Например, для списка:
# # [1, 2, 3]
# # после дублирования должны получить:
# # [1, 1, 2, 2, 3, 3]
# # Результат (список) выведите на экран в виде последовательности чисел, записанных через пробел.
# numbers = map(int, input().split())  # 8 11 2
# lst = []
# for i, v in enumerate(numbers):
#     lst.append(v)
#     lst.append(v)
# print(*lst)  # 8 8 11 11 2 2

# # # ______  Задание 139  ______
# # На вход программе подаются вещественные числа, записанные через пробел. Необходимо прочитать эти числа и сохранить
# # в списке. Затем, с помощью цикла for нужно найти наименьшее число в этом списке. Полученный результат
# # (минимальное число) вывести на экран.  Реализовать программу без использования функции min, max и сортировки.
# numbers = list(map(float, input().split()))  # 8.6 9.11 -4.567 -10.0 1.45
# n = 0
#
# for i in range(len(numbers)):
#     if i == 0:
#         n = numbers[0]
#     n = n if n < numbers[i] else numbers[i]
# print(n)  # -10.0

# # # ______  Задание 140  ______
# # На вход программе подаются вещественные числа, записанные через пробел. Необходимо прочитать эти числа и сохранить
# # в списке. Затем, все отрицательные значения в этом списке заменить на -1.0. Результат (список) выведите на экран
# # в виде последовательности чисел, записанных через пробел. Программу следует реализовать с использованием функции
# # enumerate.
# numbers = list(map(float, input().split()))  # -5.67 3.5 6.89 -3.0
# for i, v in enumerate(numbers):
#     if v < 0:
#         numbers[i] = - 1.0
#
# print(*numbers)  # -1.0 3.5 6.89 -1.0

# # # ______  Задание 141  ______
# # На вход программе подается строка с названиями городов, записанных в одну строчку через пробел. Необходимо прочитать
# # эту строку и на ее основе сформировать список из названий городов. После этого создайте итератор для полученного списка
# # и с помощью итератора выведите на экран в столбик первые два названия города.
# cities = input().split()  # Москва Лондон Берлин Пекин
# it = iter(cities)
# print(next(it))
# print(next(it))
# # Москва
# # Лондон

# # # ______  Задание 142  ______
# # На вход программе подается строка. Нужно ее прочитать и создать итератор для перебора символов этой строки. Затем,
# # через созданный итератор перебрать все символы до первого пробела. В процессе перебора символы выводить на экран в
# # одну строчку друг за другом (без пробелов). Гарантируется, что во введенной строке имеется хотя бы один пробел.
# it = iter(input())  # Возможно-это будет полезно
# stop = True
# while stop:
#     n = next(it)
#     if n == ' ':
#         stop = False
#         continue
#     print(n, end='')  # Возможно-это

# # # ______  Задание 143  ______
# # На вход программе подается четырехзначное целое положительное число. Прочитайте это число и подумайте, как можно
# # определить итератор для перебора его цифр. Выведите все цифры введенного числа (с помощью итератора) в одну
# # строчку через пробел.
# number = input()  # 4387
# it = iter(number)
# print(next(it), end=' ')
# print(next(it), end=' ')
# print(next(it), end=' ')
# print(next(it))  # 4 3 8 7

# # # ______  Задание 145  ______
# # На вход программе подается натуральное число N (то есть, положительное, целое). Требуется его прочитать и создать
# # двумерный (вложенный) список размером N x N элементов, состоящий из всех единиц, а затем, в последний столбец записать
# # пятерки. Вывести этот список на экран в виде таблицы чисел, как показано в примере ниже.
# # P.S. Будьте внимательны в конце строк пробелов быть не должно!
# n = int(input()) # 4
# lst1 = []
#
# for i in range(n):
#     lst1.append([1] * n)
#
# for i in range(n):
#     for j in range(n):
#         lst1[i][-1] = 5
#
# for i in range(n):
#     print(*lst1[i])
# # 1 1 1 5
# # 1 1 1 5
# # 1 1 1 5
# # 1 1 1 5

# # # ______  Задание 146  ______
# # На вход программе подаются строки (URL-адреса, каждая с новой строки). В программе уже реализовано их чтение
# # и сохранение в списке:
# # lst_in = list(map(str.strip, sys.stdin.readlines()))
# # Требуется заменить в строках списка lst_in все пробелы на символ дефиса (-). Следует учесть, что может быть несколько
# # подряд идущих пробелов. Полученные URL-адреса (строки) вывести на экран в столбик в порядке их следования в списке lst_in.
# # django chto  eto takoe    poryadok ustanovki
# # model mtv   marshrutizaciya funkcii  predstavleniya
# # marshrutizaciya  obrabotka isklyucheniy       zaprosov perenapravleniya
#
# import sys
#
# # считывание списка из входного потока
# lst_in = list(map(str.strip, sys.stdin.readlines()))
#
# # здесь продолжайте программу (используйте список lst_in)
# for i in range(len(lst_in)):
#     lst_in[i] = lst_in[i].split()
#     lst_in[i] = '-'.join(lst_in[i])
#     print(lst_in[i])

# # # ______  Задание 147  ______
# # На вход программе подается натуральное число n. Необходимо его прочитать и найти все простые числа (нацело делятся
# # только на 1 и на себя), которые меньше числа n, то есть, в диапазоне [2; n). Результат вывести на экран в строчку
# # через пробел.
# # Ликбез: квадратная скобка - граница включается; круглая скобка - граница исключается. Например [2; n) - диапазон
# # от 2 до n-1 целых чисел.
# n = int(input()) # 11
# lst = []
# for i in range(2, n):
#     if i == 2 or i == 3 or i == 5 or i == 7 or i == 11 or i == 13:
#         lst.append(i)
#     for j in range(2, i):
#         if i % j == 0:
#             break
#         if i % 2 == 0 or i % 3 == 0 or i % 5 == 0 or i % 7 == 0 or i % 11 == 0 or i % 13 == 0:
#             break
#
#         else:
#             if i not in lst:
#                 lst.append(i)
#
# print(*lst) # 2 3 5 7

# # # ______  Задание 148  ______
# #  На вход программе подается двумерный список размерностью 5 х 5 элементов, состоящий из нулей и в некоторых позициях
# #  единицы (см. пример ниже). В программе уже реализовано их чтение и сохранение в списке:
# # s = sys.stdin.readlines()
# # lst_in = [list(map(int, x.strip().split())) for x in s]
# # Требуется проверить, не касаются ли единицы друг друга по горизонтали, вертикали и диагонали. То есть, вокруг каждой
# # единицы должны быть нули. Если проверка проходит вывести на экран "ДА", иначе "НЕТ".
# # # import sys
# #
# # # # считывание списка из входного потока
# # # s = sys.stdin.readlines()
# # # lst_in = [list(map(int, x.strip().split())) for x in s]
# lst_in = [[1, 0, 0, 0, 0],
#           [0, 0, 1, 0, 1],
#           [0, 0, 0, 0, 0],
#           [0, 1, 0, 1, 0],
#           [0, 0, 0, 0, 0]]
# lst = []
# # здесь продолжайте программу (используйте список lst_in)
# for i in range(len(lst_in) - 1):
#     for j in range(len(lst_in) - 1):
#         if lst_in[i][j] + lst_in[i][j + 1] + lst_in[i + 1][j] + lst_in[i + 1][j + 1] > 1:
#             lst.append('-')
#             break
#         else:
#             lst.append('+')
#
# if '-' in lst:
#     print('НЕТ')
# else:
#     print('ДА')

# # # ______  Задание 149  ______
# # На вход программе подается двумерный список размерностью 5 х 5 элементов, состоящий из целых чисел (пример см. ниже).
# # В программе уже реализовано их чтение и сохранение в списке:
# # s = sys.stdin.readlines()
# # lst_in = [list(map(int, x.strip().split())) for x in s]
# # Необходимо проверить, является ли этот двумерный список симметричным относительно главной диагонали. Главная диагональ
# # — та, которая идёт из левого верхнего угла двумерного массива в правый нижний. Выведите на экран "ДА", если матрица
# # (таблица чисел) симметрична и "НЕТ" в противном случае.
# lst_in = [[2, 3, 4, 5, 6],
#           [3, 2, 7, 8, 9],
#           [4, 7, 2, 0, 4],
#           [5, 8, 0, 2, 1],
#           [6, 9, 4, 1, 2]]
#
# lst = []
# for i in range(len(lst_in)):
#     for j in range(len(lst_in)):
#         if lst_in[i][j] == lst_in[j][i]:
#             lst.append('+')
#         else:
#             lst.append('-')
#             break
#
# if '-' in lst:
#     print('НЕТ')
# else:
#     print('ДА')

# # # ______  Задание 150  ______
# # На вход программе подаются целые числа, записанные в одну строку через пробел. Необходимо их прочитать и сохранить
# # в списке. Затем, выполнить сортировку выбором полученного списка по возрастанию (неубыванию). Идея алгоритма очень
# # проста и проиллюстрирована на рисунке ниже.
# # Вначале мы рассматриваем первый элемент списка и ищем второй минимальный относительно первого элемента (включая и его).
# # На рисунке - это последний элемент со значением -1. Затем, меняем местами первый и последний элементы. Переходим
# # ко второму элементу списка и повторяем эту же процедуру, но относительно второго элемента (то есть, первый уже
# # не рассматриваем). На рисунке минимальный элемент - это 2, поэтому менять местами здесь ничего не нужно. Переходим
# # к 3-му элементы со значением 6. Относительно него находим минимальный элемент - это 3. Меняем их местами.
# # Вот идея алгоритма сортировки выбором. Реализуйте его для сформированного списка целых чисел. Результат выведите
# # на экран в виде последовательности чисел, записанных в одну строчку через пробел.
# numbers = list(map(int, input().split()))  # 8 11 -53 2 10 11
#
# for i in range(-1, len(numbers)):
#     for j in range(i + 1, len(numbers)):
#         n = min(numbers[j:])
#         if numbers[j] > n:
#             ind = numbers.index(n, j)
#             numbers[ind], numbers[j] = numbers[j], numbers[ind]
#
# print(*numbers)

# # # ______  Задание 151  ______
# # На вход программе подаются целые числа, записанные в одну строку через пробел. Необходимо их прочитать и сохранить
# # в списке. Затем, выполнить сортировку полученного списка по возрастанию (неубыванию) методом всплывающего пузырька.
# # Идея алгоритма проста и показана на рисунке ниже.
# # При первом проходе перебираем все соседние пары элементов и если значение предыдущего элемента (слева) больше значения
# # следующего (справа), то они меняются местами. (На рисунке 3 и 2 меняются местами). Следующая пара - это 3 и 6. Они
# # уже выстроены по возрастанию, поэтому ничего не делаем и переходим к следующей паре 6 и -1. Меняем значения местами
# # и видим, что на последнем месте находится максимальное значение 6, что нам и нужно.
# # При втором проходе делаем все то же самое, но доходим до предпоследнего элемента, так как последнее значение 6 уже
# # отсортировано. На третьем проходе исключаем уже последние два элемента и так далее. То есть, в этом алгоритме достаточно
# # сделать N-1 проходов, где N - длина списка.
# # Вот идея алгоритма сортировки всплывающего пузырька. Реализуйте его для вводимого списка целых чисел. Результат
# # выведите на экран в виде последовательности чисел, записанных в одну строчку через пробел.
# numbers = list(map(int, input().split()))  # 4 5 2 0 6 3 -56 3 -1
# for i in range(len(numbers) - 1):
#         for j in range(len(numbers) - i - 1):
#             if numbers[j] > numbers[j + 1]:
#                 numbers[j], numbers[j + 1] = numbers[j + 1], numbers[j]
#
# print(*numbers)  # -56 -1 0 2 3 3 4 5 6

# # # ______  Задание 152  ______
# # В некоторой стране используются денежные купюры достоинством в 1, 2, 4, 8, 16, 32 и 64. На вход программы подается
# # натуральное число n. Необходимо его прочитать. Затем определите, каким наименьшим количеством денежных купюр
# # достоинством в 1, 2, 4, 8, 16, 32 и 64 можно выплатить сумму n? выведите на экран список купюр для формирования суммы
# # n (в одну строчку через пробел, начиная с наибольшей и заканчивая наименьшей). Предполагается, что имеется достаточно
# # большое количество купюр всех достоинств.
# # P.S. Программа может быть реализована и без вложенных циклов.
# n = int(input())  # 221
# lst = [64, 32, 16, 8, 4, 2, 1]
# lst2 = []
# a = 0
#
# for i in lst:
#     if n < i:
#         continue
#     counter = 0
#     while n % i != 0 and n > 1:
#         n -= 1
#         counter += 1
#     else:
#         a = int(n / i)
#         print(f'{i} ' * a, end='')
#         n = counter
# # 64 64 64 16 8 4 1

# # # ______  Задание 153  ______
# #  На вход программе подаются вещественные числа, записанные через пробел. Необходимо их прочитать и сохранить в списке
# #  lst. Затем, используя list comprehension (генератора списков) сформировать новый список lst_abs из модулей чисел списка
# #  lst (в итоговом списке должны храниться именно числа, а не строки). Список lst_abs вывести на экран командой:
# # print(lst_abs)
# lst = list(map(float, input().split()))  # 5.56 -8.7 1.0 3.14 77.845
# lst_abs = [abs(x) for x in lst]
# print(lst_abs)  # [5.56, 8.7, 1.0, 3.14, 77.845]

# # # ______  Задание 154  ______
# #  На вход программе подается семизначное целое положительное число. Необходимо его прочитать и с помощью list
# #  comprehension сформировать список lst, содержащий цифры этого числа (в списке должны быть записаны числа, а не строки).
# #  Полученный список вывести на экран командой:
# # print(lst)
# n = input()  # 4567397
# lst = [int(x) for x in n]
# print(lst) # [4, 5, 6, 7, 3, 9, 7]

# # # ______  Задание 155  ______
# На вход программе подается натуральное число N. Прочитайте его и с помощью list comprehension сформируйте двумерный
# список размером N x N, состоящий из нулей, а по главной диагонали - единицы. (Главная диагональ - это элементы, идущие
# по диагонали от верхнего левого угла матрицы до ее нижнего правого угла). Полученный двумерный список отобразите в виде
# таблицы чисел, как показано в примере ниже.
# n = int(input()) # 4
# lst = [[0] * n for x in range(n)]
# for i in range(0, len(lst)):
#     for j in range(0, len(lst)):
#         if i == j:
#             lst[i][j] = 1
#         if j == len(lst) - 1:
#             print(lst[i][j], end='')
#         else:
#             print(lst[i][j], end=' ')
#     print()

# # пример решения
# n = int(input())
#
# lst = [[1 if i == j else 0 for i in range(n)]for j in range(n)]
#
# for i in lst:
#     print(*i)

# n = int(input())
# [print(*[int(i == j) for i in range(n)]) for j in range(n)]

# # # ______  Задание 156  ______
# # На вход программе подается строка с названиями городов, записанных через пробел. Необходимо прочитать эту строку
# # и сформировать список с помощью list comprehension, содержащий названия городов длиной более пяти символов. Элементы
# # полученного списка вывести в одну строчку через пробел.
# cities = input().split()  # Казань Уфа Москва Челябинск Омск Тур Самара
# print(*[i for i in cities if len(i) > 5])  # Казань Москва Челябинск Самара

# # # ______  Задание 157  ______
# # На вход программе подается натуральное число n. Необходимо его прочитать и сформировать список с помощью list
# # comprehension, состоящий из делителей числа n (включая и само число n). Элементы полученного списка вывести в одну
# # строчку через пробел.
# n = int(input())  # 10
# print(*[x for x in range(1, n + 1) if n % x == 0])  # 1 2 5 10


# # # ______  Задание 158  ______
# # На вход программе подается натуральное число N. Необходимо его прочитать и сгенерировать вложенный список с помощью
# # list comprehension, размером N x N, где первая строка содержала бы все нули, вторая - все единицы, третья - все двойки
# # и так до N-й строки. Результат вывести в виде таблицы чисел как показано в примере ниже.
# n = int(input())  # 4
# [print(*[j for i in range(n)]) for j in range(n)]
# # 0 0 0 0
# # 1 1 1 1
# # 2 2 2 2
# # 3 3 3 3

# # # ______  Задание 159  ______
# # На вход программе подаются вещественные числа, записанные через пробел. Необходимо их прочитать и сохранить в списке.
# # Затем, с помощью list comprehension сформировать еще один список, состоящий из элементов исходного списка, имеющих
# # четные индексы (то есть, выбрать все элементы с четными индексами). Элементы полученного списка вывести в одну строчку
# # через пробел.
# numbers = list(map(float, input().split())) # 8.5 11.3 1.0 -4.5 11.34 6.45
# print(*[numbers[i] for i in range(0, len(numbers), 2)])  # 8.5 1.0 11.34

# # # ______  Задание 160  ______
# # На вход программе подаются два списка целых чисел одинаковой длины, каждый с новой строки. Необходимо их прочитать и
# # каждый сохранить в своем отдельном списке. Затем, с помощью list comprehension сформировать третий список, состоящий
# # из суммы соответствующих пар чисел введенных списков. Элементы полученного списка вывести в одну строчку через пробел.
# lst1 = list(map(int,input().split()))  # 1 2 3 4 5
# lst2 = list(map(int,input().split()))   # 6 7 8 9 10
# [print(*[lst1[i] + lst2[j]for i in range(len(lst1)) if i == j], end=' ')for j in range(len(lst2))] # 7 9 11 13 15

# # # ______  Задание 161  ______
# #  На вход программе подается строка в формате:
# # <город 1> <численность населения 1> <город 2> <численность населения 2> ... <город N> <численность населения N>
# # Необходимо прочитать эту строку и с помощью list comprehension сформировать список lst, содержащий вложенные списки из пар:
# # [[<город 1>, <численность населения 1>], [<город 2>, <численность населения 2>], ...]
# # Численность населения - целое число в тыс. человек. Выведите полученный список командой:
# # print(lst)
# lst1 = input().split()  # Москва 15000 Уфа 1200 Самара 1090 Казань 1300
# lst = [[lst1[j] , int(lst1[j + 1])] for j in range(0, len(lst1), 2)]
# print(lst)  # [['Москва', 15000], ['Уфа', 1200], ['Самара', 1090], ['Казань', 1300]]

# # # ______  Задание 162  ______
# # На вход программе подается двумерная таблица из целых чисел (см. пример ниже). В программе уже реализовано его чтение
# # и сохранение в двумерном списке:
# # s = sys.stdin.readlines()
# # lst_in = [list(map(int, x.strip().split())) for x in s]
# # С помощью list comprehension необходимо преобразовать двумерный список lst_in в одномерный так, чтобы значения
# # элементов шли в обратном порядке. Результат отобразить в виде строки из чисел, записанных через пробел.
# # 1 2 3 4
# # 5 6 7 8
# # 9 8 7 6
# # 5 4 3 2
# import sys
# s = sys.stdin.readlines()
# lst_in = [list(map(int, x.strip().split())) for x in s]
# lst_in = [i for row in lst_in[::-1] for i in row[::-1]]
# print(*lst_in) # 2 3 4 5 6 7 8 9 8 7 6 5 4 3 2 1
